
Vending-Masin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ebc  08002ebc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002ebc  08002ebc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ebc  08002ebc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000074  08002f38  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002f38  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000858b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017d9  00000000  00000000  00028628  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a0  00000000  00000000  00029e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002a7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000139f2  00000000  00000000  0002b070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007272  00000000  00000000  0003ea62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070369  00000000  00000000  00045cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b603d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e4  00000000  00000000  000b60b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d00 	.word	0x08002d00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002d00 	.word	0x08002d00

0800014c <LCD_Write4bit>:
#include "LCD.h"
#include "stm32f1xx_hal.h"
#include "main.h"


void LCD_Write4bit(uint8_t data){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((data>>0)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f003 0301 	and.w	r3, r3, #1
 800015c:	b2db      	uxtb	r3, r3
 800015e:	461a      	mov	r2, r3
 8000160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000164:	4815      	ldr	r0, [pc, #84]	; (80001bc <LCD_Write4bit+0x70>)
 8000166:	f001 f9e4 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((data>>1)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	085b      	lsrs	r3, r3, #1
 800016e:	b2db      	uxtb	r3, r3
 8000170:	f003 0301 	and.w	r3, r3, #1
 8000174:	b2db      	uxtb	r3, r3
 8000176:	461a      	mov	r2, r3
 8000178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017c:	4810      	ldr	r0, [pc, #64]	; (80001c0 <LCD_Write4bit+0x74>)
 800017e:	f001 f9d8 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((data>>2)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	089b      	lsrs	r3, r3, #2
 8000186:	b2db      	uxtb	r3, r3
 8000188:	f003 0301 	and.w	r3, r3, #1
 800018c:	b2db      	uxtb	r3, r3
 800018e:	461a      	mov	r2, r3
 8000190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000194:	480a      	ldr	r0, [pc, #40]	; (80001c0 <LCD_Write4bit+0x74>)
 8000196:	f001 f9cc 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((data>>3)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	08db      	lsrs	r3, r3, #3
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	f003 0301 	and.w	r3, r3, #1
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	461a      	mov	r2, r3
 80001a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <LCD_Write4bit+0x74>)
 80001ae:	f001 f9c0 	bl	8001532 <HAL_GPIO_WritePin>
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010c00 	.word	0x40010c00
 80001c0:	40010800 	.word	0x40010800

080001c4 <LCD_Send>:

void LCD_Send(_Bool mode, uint8_t data){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	460a      	mov	r2, r1
 80001ce:	71fb      	strb	r3, [r7, #7]
 80001d0:	4613      	mov	r3, r2
 80001d2:	71bb      	strb	r3, [r7, #6]
	LCD_RW(0);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001da:	4832      	ldr	r0, [pc, #200]	; (80002a4 <LCD_Send+0xe0>)
 80001dc:	f001 f9a9 	bl	8001532 <HAL_GPIO_WritePin>
	if (mode){
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d006      	beq.n	80001f4 <LCD_Send+0x30>
		LCD_RS(1);
 80001e6:	2201      	movs	r2, #1
 80001e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ec:	482d      	ldr	r0, [pc, #180]	; (80002a4 <LCD_Send+0xe0>)
 80001ee:	f001 f9a0 	bl	8001532 <HAL_GPIO_WritePin>
 80001f2:	e005      	b.n	8000200 <LCD_Send+0x3c>
	}
	else {LCD_RS(0);}
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001fa:	482a      	ldr	r0, [pc, #168]	; (80002a4 <LCD_Send+0xe0>)
 80001fc:	f001 f999 	bl	8001532 <HAL_GPIO_WritePin>
	LCD_Write4bit(data>>4);
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	091b      	lsrs	r3, r3, #4
 8000204:	b2db      	uxtb	r3, r3
 8000206:	4618      	mov	r0, r3
 8000208:	f7ff ffa0 	bl	800014c <LCD_Write4bit>
	LCD_EN();
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4824      	ldr	r0, [pc, #144]	; (80002a4 <LCD_Send+0xe0>)
 8000214:	f001 f98d 	bl	8001532 <HAL_GPIO_WritePin>
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	e002      	b.n	8000224 <LCD_Send+0x60>
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	3301      	adds	r3, #1
 8000222:	617b      	str	r3, [r7, #20]
 8000224:	697b      	ldr	r3, [r7, #20]
 8000226:	f240 52db 	movw	r2, #1499	; 0x5db
 800022a:	4293      	cmp	r3, r2
 800022c:	ddf7      	ble.n	800021e <LCD_Send+0x5a>
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000234:	481b      	ldr	r0, [pc, #108]	; (80002a4 <LCD_Send+0xe0>)
 8000236:	f001 f97c 	bl	8001532 <HAL_GPIO_WritePin>
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	e002      	b.n	8000246 <LCD_Send+0x82>
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	3301      	adds	r3, #1
 8000244:	613b      	str	r3, [r7, #16]
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	f240 52db 	movw	r2, #1499	; 0x5db
 800024c:	4293      	cmp	r3, r2
 800024e:	ddf7      	ble.n	8000240 <LCD_Send+0x7c>
	LCD_Write4bit(data);
 8000250:	79bb      	ldrb	r3, [r7, #6]
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ff7a 	bl	800014c <LCD_Write4bit>
	LCD_EN();
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800025e:	4811      	ldr	r0, [pc, #68]	; (80002a4 <LCD_Send+0xe0>)
 8000260:	f001 f967 	bl	8001532 <HAL_GPIO_WritePin>
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	e002      	b.n	8000270 <LCD_Send+0xac>
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3301      	adds	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	f240 52db 	movw	r2, #1499	; 0x5db
 8000276:	4293      	cmp	r3, r2
 8000278:	ddf7      	ble.n	800026a <LCD_Send+0xa6>
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000280:	4808      	ldr	r0, [pc, #32]	; (80002a4 <LCD_Send+0xe0>)
 8000282:	f001 f956 	bl	8001532 <HAL_GPIO_WritePin>
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	e002      	b.n	8000292 <LCD_Send+0xce>
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	3301      	adds	r3, #1
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	f240 52db 	movw	r2, #1499	; 0x5db
 8000298:	4293      	cmp	r3, r2
 800029a:	ddf7      	ble.n	800028c <LCD_Send+0xc8>
}
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40010c00 	.word	0x40010c00

080002a8 <LCD_Print>:

void LCD_Print(char *pData){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	while(*pData){
 80002b0:	e007      	b.n	80002c2 <LCD_Print+0x1a>
		LCD_Data(*pData++);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	1c5a      	adds	r2, r3, #1
 80002b6:	607a      	str	r2, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4619      	mov	r1, r3
 80002bc:	2001      	movs	r0, #1
 80002be:	f7ff ff81 	bl	80001c4 <LCD_Send>
	while(*pData){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1f3      	bne.n	80002b2 <LCD_Print+0xa>
//		pData++;
	}
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t x, uint8_t y){
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	4603      	mov	r3, r0
 80002da:	460a      	mov	r2, r1
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	4613      	mov	r3, r2
 80002e0:	71bb      	strb	r3, [r7, #6]
	if(y==0) {LCD_Command(0x80 + x);}
 80002e2:	79bb      	ldrb	r3, [r7, #6]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d106      	bne.n	80002f6 <LCD_SetCursor+0x24>
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	3b80      	subs	r3, #128	; 0x80
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	4619      	mov	r1, r3
 80002f0:	2000      	movs	r0, #0
 80002f2:	f7ff ff67 	bl	80001c4 <LCD_Send>
	if(y==1) {LCD_Command(0xC0 + x);}
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d106      	bne.n	800030a <LCD_SetCursor+0x38>
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	3b40      	subs	r3, #64	; 0x40
 8000300:	b2db      	uxtb	r3, r3
 8000302:	4619      	mov	r1, r3
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ff5d 	bl	80001c4 <LCD_Send>
	if(y==2) {LCD_Command(0x94 + x);}
 800030a:	79bb      	ldrb	r3, [r7, #6]
 800030c:	2b02      	cmp	r3, #2
 800030e:	d106      	bne.n	800031e <LCD_SetCursor+0x4c>
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	3b6c      	subs	r3, #108	; 0x6c
 8000314:	b2db      	uxtb	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	2000      	movs	r0, #0
 800031a:	f7ff ff53 	bl	80001c4 <LCD_Send>
	if(y==3) {LCD_Command(0xD4 + x);}
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d106      	bne.n	8000332 <LCD_SetCursor+0x60>
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	3b2c      	subs	r3, #44	; 0x2c
 8000328:	b2db      	uxtb	r3, r3
 800032a:	4619      	mov	r1, r3
 800032c:	2000      	movs	r0, #0
 800032e:	f7ff ff49 	bl	80001c4 <LCD_Send>

}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <LCD_Init>:

void LCD_Init(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	LCD_RW(0);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <LCD_Init+0x40>)
 8000348:	f001 f8f3 	bl	8001532 <HAL_GPIO_WritePin>
	LCD_Command(0x33);
 800034c:	2133      	movs	r1, #51	; 0x33
 800034e:	2000      	movs	r0, #0
 8000350:	f7ff ff38 	bl	80001c4 <LCD_Send>
	LCD_Command(0x32);
 8000354:	2132      	movs	r1, #50	; 0x32
 8000356:	2000      	movs	r0, #0
 8000358:	f7ff ff34 	bl	80001c4 <LCD_Send>
	LCD_Command(0x28);
 800035c:	2128      	movs	r1, #40	; 0x28
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ff30 	bl	80001c4 <LCD_Send>
	LCD_Command(0x0C);
 8000364:	210c      	movs	r1, #12
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff ff2c 	bl	80001c4 <LCD_Send>
	LCD_Command(0x06);
 800036c:	2106      	movs	r1, #6
 800036e:	2000      	movs	r0, #0
 8000370:	f7ff ff28 	bl	80001c4 <LCD_Send>
	LCD_Clear();
 8000374:	f000 f804 	bl	8000380 <LCD_Clear>
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40010c00 	.word	0x40010c00

08000380 <LCD_Clear>:

void LCD_Clear(){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	LCD_Command(0x01);
 8000384:	2101      	movs	r1, #1
 8000386:	2000      	movs	r0, #0
 8000388:	f7ff ff1c 	bl	80001c4 <LCD_Send>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}

08000390 <LCD_PrintNum>:

void LCD_PrintNum(int16_t number){
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	char buff[20];
	sprintf(buff, "%d", number);
 800039a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800039e:	f107 030c 	add.w	r3, r7, #12
 80003a2:	4906      	ldr	r1, [pc, #24]	; (80003bc <LCD_PrintNum+0x2c>)
 80003a4:	4618      	mov	r0, r3
 80003a6:	f002 f899 	bl	80024dc <siprintf>
	LCD_Print(buff);
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff7a 	bl	80002a8 <LCD_Print>
}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	08002d18 	.word	0x08002d18

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c4:	f000 fdb2 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c8:	f000 f812 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003cc:	f000 f8a2 	bl	8000514 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003d0:	f000 f854 	bl	800047c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80003d4:	f7ff ffb2 	bl	800033c <LCD_Init>
  HAL_Delay(10);
 80003d8:	200a      	movs	r0, #10
 80003da:	f000 fe09 	bl	8000ff0 <HAL_Delay>
//  LCD_SetCursor(0,0);
//  LCD_Print("**VENDING  MACHINE**");
//  LCD_SetCursor(0, 1);
//  LCD_Print("    by Lapitech     ");
  task_init();
 80003de:	f000 fa2f 	bl	8000840 <task_init>
  HAL_TIM_Base_Start_IT(&htim2);
 80003e2:	4802      	ldr	r0, [pc, #8]	; (80003ec <main+0x2c>)
 80003e4:	f001 fceb 	bl	8001dbe <HAL_TIM_Base_Start_IT>
//  LCD_Clear();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <main+0x28>
 80003ea:	bf00      	nop
 80003ec:	200000a0 	.word	0x200000a0

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b090      	sub	sp, #64	; 0x40
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	f107 0318 	add.w	r3, r7, #24
 80003fa:	2228      	movs	r2, #40	; 0x28
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 f864 	bl	80024cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000412:	2301      	movs	r3, #1
 8000414:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000420:	2301      	movs	r3, #1
 8000422:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000424:	2302      	movs	r3, #2
 8000426:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800042e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000432:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	f107 0318 	add.w	r3, r7, #24
 8000438:	4618      	mov	r0, r3
 800043a:	f001 f8ab 	bl	8001594 <HAL_RCC_OscConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000444:	f000 f904 	bl	8000650 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	230f      	movs	r3, #15
 800044a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	2302      	movs	r3, #2
 800044e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2102      	movs	r1, #2
 8000462:	4618      	mov	r0, r3
 8000464:	f001 fb16 	bl	8001a94 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800046e:	f000 f8ef 	bl	8000650 <Error_Handler>
  }
}
 8000472:	bf00      	nop
 8000474:	3740      	adds	r7, #64	; 0x40
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000490:	463b      	mov	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <MX_TIM2_Init+0x94>)
 800049a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800049e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_TIM2_Init+0x94>)
 80004a2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80004a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a8:	4b19      	ldr	r3, [pc, #100]	; (8000510 <MX_TIM2_Init+0x94>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6-1;
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_TIM2_Init+0x94>)
 80004b0:	2205      	movs	r2, #5
 80004b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MX_TIM2_Init+0x94>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_TIM2_Init+0x94>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004c0:	4813      	ldr	r0, [pc, #76]	; (8000510 <MX_TIM2_Init+0x94>)
 80004c2:	f001 fc51 	bl	8001d68 <HAL_TIM_Base_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004cc:	f000 f8c0 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	4619      	mov	r1, r3
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <MX_TIM2_Init+0x94>)
 80004de:	f001 fd99 	bl	8002014 <HAL_TIM_ConfigClockSource>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004e8:	f000 f8b2 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ec:	2300      	movs	r3, #0
 80004ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f4:	463b      	mov	r3, r7
 80004f6:	4619      	mov	r1, r3
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_TIM2_Init+0x94>)
 80004fa:	f001 ff67 	bl	80023cc <HAL_TIMEx_MasterConfigSynchronization>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000504:	f000 f8a4 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200000a0 	.word	0x200000a0

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000528:	4b45      	ldr	r3, [pc, #276]	; (8000640 <MX_GPIO_Init+0x12c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a44      	ldr	r2, [pc, #272]	; (8000640 <MX_GPIO_Init+0x12c>)
 800052e:	f043 0310 	orr.w	r3, r3, #16
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b42      	ldr	r3, [pc, #264]	; (8000640 <MX_GPIO_Init+0x12c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0310 	and.w	r3, r3, #16
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000540:	4b3f      	ldr	r3, [pc, #252]	; (8000640 <MX_GPIO_Init+0x12c>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a3e      	ldr	r2, [pc, #248]	; (8000640 <MX_GPIO_Init+0x12c>)
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b3c      	ldr	r3, [pc, #240]	; (8000640 <MX_GPIO_Init+0x12c>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0320 	and.w	r3, r3, #32
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b39      	ldr	r3, [pc, #228]	; (8000640 <MX_GPIO_Init+0x12c>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a38      	ldr	r2, [pc, #224]	; (8000640 <MX_GPIO_Init+0x12c>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b36      	ldr	r3, [pc, #216]	; (8000640 <MX_GPIO_Init+0x12c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	4b33      	ldr	r3, [pc, #204]	; (8000640 <MX_GPIO_Init+0x12c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a32      	ldr	r2, [pc, #200]	; (8000640 <MX_GPIO_Init+0x12c>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b30      	ldr	r3, [pc, #192]	; (8000640 <MX_GPIO_Init+0x12c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0308 	and.w	r3, r3, #8
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	482d      	ldr	r0, [pc, #180]	; (8000644 <MX_GPIO_Init+0x130>)
 8000590:	f000 ffcf 	bl	8001532 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LCD_D5_Pin|LCD_D6_Pin 
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 51ce 	mov.w	r1, #6592	; 0x19c0
 800059a:	482b      	ldr	r0, [pc, #172]	; (8000648 <MX_GPIO_Init+0x134>)
 800059c:	f000 ffc9 	bl	8001532 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin 
 80005a0:	2200      	movs	r2, #0
 80005a2:	f64f 4183 	movw	r1, #64643	; 0xfc83
 80005a6:	4829      	ldr	r0, [pc, #164]	; (800064c <MX_GPIO_Init+0x138>)
 80005a8:	f000 ffc3 	bl	8001532 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin|LCD_D4_Pin 
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	481f      	ldr	r0, [pc, #124]	; (8000644 <MX_GPIO_Init+0x130>)
 80005c6:	f000 fe43 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB_Cancel_Pin PB_Process_Pin */
  GPIO_InitStruct.Pin = PB_Cancel_Pin|PB_Process_Pin;
 80005ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	4819      	ldr	r0, [pc, #100]	; (8000644 <MX_GPIO_Init+0x130>)
 80005e0:	f000 fe36 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : Koin_500_Pin Koin_1000_Pin */
  GPIO_InitStruct.Pin = Koin_500_Pin|Koin_1000_Pin;
 80005e4:	2303      	movs	r3, #3
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	4814      	ldr	r0, [pc, #80]	; (8000648 <MX_GPIO_Init+0x134>)
 80005f8:	f000 fe2a 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LCD_D5_Pin LCD_D6_Pin 
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LCD_D5_Pin|LCD_D6_Pin 
 80005fc:	f44f 53ce 	mov.w	r3, #6592	; 0x19c0
 8000600:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2302      	movs	r3, #2
 800060c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_GPIO_Init+0x134>)
 8000616:	f000 fe1b 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LED_5_Pin LED_6_Pin 
                           LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin LCD_D4_Pin 
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin 
 800061a:	f64f 4383 	movw	r3, #64643	; 0xfc83
 800061e:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin|LCD_D4_Pin 
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2302      	movs	r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_GPIO_Init+0x138>)
 8000634:	f000 fe0c 	bl	8001250 <HAL_GPIO_Init>

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	40011000 	.word	0x40011000
 8000648:	40010800 	.word	0x40010800
 800064c:	40010c00 	.word	0x40010c00

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_MspInit+0x5c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_MspInit+0x5c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x5c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_MspInit+0x5c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_MspInit+0x60>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_MspInit+0x60>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000

080006c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006d0:	d113      	bne.n	80006fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_TIM_Base_MspInit+0x44>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <HAL_TIM_Base_MspInit+0x44>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_TIM_Base_MspInit+0x44>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	201c      	movs	r0, #28
 80006f0:	f000 fd77 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006f4:	201c      	movs	r0, #28
 80006f6:	f000 fd90 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <HardFault_Handler+0x4>

0800071a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <MemManage_Handler+0x4>

08000720 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <BusFault_Handler+0x4>

08000726 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <UsageFault_Handler+0x4>

0800072c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000754:	f000 fc30 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <TIM2_IRQHandler+0x1c>)
 8000762:	f001 fb4f 	bl	8001e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8000766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <TIM2_IRQHandler+0x20>)
 800076c:	f000 fef9 	bl	8001562 <HAL_GPIO_TogglePin>
  task_run();
 8000770:	f000 f88e 	bl	8000890 <task_run>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000a0 	.word	0x200000a0
 800077c:	40011000 	.word	0x40011000

08000780 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <_sbrk+0x50>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x16>
		heap_end = &end;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <_sbrk+0x50>)
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <_sbrk+0x54>)
 8000794:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <_sbrk+0x50>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <_sbrk+0x50>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	466a      	mov	r2, sp
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d907      	bls.n	80007ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007aa:	f001 fe65 	bl	8002478 <__errno>
 80007ae:	4602      	mov	r2, r0
 80007b0:	230c      	movs	r3, #12
 80007b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	e006      	b.n	80007c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <_sbrk+0x50>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <_sbrk+0x50>)
 80007c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000090 	.word	0x20000090
 80007d4:	200000f0 	.word	0x200000f0

080007d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <SystemInit+0x5c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a14      	ldr	r2, [pc, #80]	; (8000834 <SystemInit+0x5c>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <SystemInit+0x5c>)
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	4911      	ldr	r1, [pc, #68]	; (8000834 <SystemInit+0x5c>)
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <SystemInit+0x60>)
 80007f0:	4013      	ands	r3, r2
 80007f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <SystemInit+0x5c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <SystemInit+0x5c>)
 80007fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000802:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <SystemInit+0x5c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SystemInit+0x5c>)
 800080a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800080e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <SystemInit+0x5c>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <SystemInit+0x5c>)
 8000816:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800081a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SystemInit+0x5c>)
 800081e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000822:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SystemInit+0x64>)
 8000826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800082a:	609a      	str	r2, [r3, #8]
#endif 
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	f8ff0000 	.word	0xf8ff0000
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <task_init>:
volatile uint8_t debounce2=0xFF;
volatile uint8_t debounce3=0xFF;
volatile uint8_t debounce4=0xFF;
uint16_t delaytime,kembali=0;

void task_init(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
//	LCD_Init();
	kondisi=start;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <task_init+0x44>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	led_minuman_OFF;
 800084a:	2201      	movs	r2, #1
 800084c:	2140      	movs	r1, #64	; 0x40
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <task_init+0x48>)
 8000850:	f000 fe6f 	bl	8001532 <HAL_GPIO_WritePin>
	led_proses_OFF;
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <task_init+0x4c>)
 800085a:	f000 fe6a 	bl	8001532 <HAL_GPIO_WritePin>
	led_koinOut_OFF;
 800085e:	2201      	movs	r2, #1
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <task_init+0x48>)
 8000864:	f000 fe65 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2102      	movs	r1, #2
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <task_init+0x4c>)
 800086e:	f000 fe60 	bl	8001532 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <task_init+0x4c>)
 800087a:	f000 fe5a 	bl	8001532 <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000e4 	.word	0x200000e4
 8000888:	40010800 	.word	0x40010800
 800088c:	40010c00 	.word	0x40010c00

08000890 <task_run>:

void task_run(){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	switch(kondisi){
 8000894:	4bb5      	ldr	r3, [pc, #724]	; (8000b6c <task_run+0x2dc>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b08      	cmp	r3, #8
 800089a:	f200 824c 	bhi.w	8000d36 <task_run+0x4a6>
 800089e:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <task_run+0x14>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	080008c9 	.word	0x080008c9
 80008a8:	080008fb 	.word	0x080008fb
 80008ac:	08000949 	.word	0x08000949
 80008b0:	0800097d 	.word	0x0800097d
 80008b4:	080009e3 	.word	0x080009e3
 80008b8:	08000a83 	.word	0x08000a83
 80008bc:	08000ba5 	.word	0x08000ba5
 80008c0:	08000c3b 	.word	0x08000c3b
 80008c4:	08000cd1 	.word	0x08000cd1
	case start:{
		LCD_SetCursor(0,0);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fd01 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 80008d0:	48a7      	ldr	r0, [pc, #668]	; (8000b70 <task_run+0x2e0>)
 80008d2:	f7ff fce9 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0, 1);
 80008d6:	2101      	movs	r1, #1
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fcfa 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("    by Lapitech     ");
 80008de:	48a5      	ldr	r0, [pc, #660]	; (8000b74 <task_run+0x2e4>)
 80008e0:	f7ff fce2 	bl	80002a8 <LCD_Print>
		next_kondisi=k0;
 80008e4:	4ba4      	ldr	r3, [pc, #656]	; (8000b78 <task_run+0x2e8>)
 80008e6:	2203      	movs	r2, #3
 80008e8:	701a      	strb	r2, [r3, #0]
		kondisi=delay;
 80008ea:	4ba0      	ldr	r3, [pc, #640]	; (8000b6c <task_run+0x2dc>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
		delaytime=500;
 80008f0:	4ba2      	ldr	r3, [pc, #648]	; (8000b7c <task_run+0x2ec>)
 80008f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008f6:	801a      	strh	r2, [r3, #0]
		break;
 80008f8:	e21d      	b.n	8000d36 <task_run+0x4a6>
	}


	case delay:{
		delaytime--;
 80008fa:	4ba0      	ldr	r3, [pc, #640]	; (8000b7c <task_run+0x2ec>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b9e      	ldr	r3, [pc, #632]	; (8000b7c <task_run+0x2ec>)
 8000904:	801a      	strh	r2, [r3, #0]
		if(delaytime==0){
 8000906:	4b9d      	ldr	r3, [pc, #628]	; (8000b7c <task_run+0x2ec>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	f040 820c 	bne.w	8000d28 <task_run+0x498>

			kondisi=next_kondisi;
 8000910:	4b99      	ldr	r3, [pc, #612]	; (8000b78 <task_run+0x2e8>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b95      	ldr	r3, [pc, #596]	; (8000b6c <task_run+0x2dc>)
 8000916:	701a      	strb	r2, [r3, #0]
			led_koinOut_OFF;
 8000918:	2201      	movs	r2, #1
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	4898      	ldr	r0, [pc, #608]	; (8000b80 <task_run+0x2f0>)
 800091e:	f000 fe08 	bl	8001532 <HAL_GPIO_WritePin>
			led_minuman_OFF;
 8000922:	2201      	movs	r2, #1
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	4896      	ldr	r0, [pc, #600]	; (8000b80 <task_run+0x2f0>)
 8000928:	f000 fe03 	bl	8001532 <HAL_GPIO_WritePin>
			led_kembali1000_OFF;
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000932:	4894      	ldr	r0, [pc, #592]	; (8000b84 <task_run+0x2f4>)
 8000934:	f000 fdfd 	bl	8001532 <HAL_GPIO_WritePin>
			led_kembali500_OFF;
 8000938:	2201      	movs	r2, #1
 800093a:	2102      	movs	r1, #2
 800093c:	4891      	ldr	r0, [pc, #580]	; (8000b84 <task_run+0x2f4>)
 800093e:	f000 fdf8 	bl	8001532 <HAL_GPIO_WritePin>
			LCD_Clear();
 8000942:	f7ff fd1d 	bl	8000380 <LCD_Clear>
		}
		break;
 8000946:	e1ef      	b.n	8000d28 <task_run+0x498>
	}

	case buzzer:{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	488d      	ldr	r0, [pc, #564]	; (8000b84 <task_run+0x2f4>)
 800094e:	f000 fdf0 	bl	8001532 <HAL_GPIO_WritePin>
		delaytime--;
 8000952:	4b8a      	ldr	r3, [pc, #552]	; (8000b7c <task_run+0x2ec>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	3b01      	subs	r3, #1
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b88      	ldr	r3, [pc, #544]	; (8000b7c <task_run+0x2ec>)
 800095c:	801a      	strh	r2, [r3, #0]
		LCD_Clear();
 800095e:	f7ff fd0f 	bl	8000380 <LCD_Clear>
		if(delaytime==0){
 8000962:	4b86      	ldr	r3, [pc, #536]	; (8000b7c <task_run+0x2ec>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d108      	bne.n	800097c <task_run+0xec>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	4885      	ldr	r0, [pc, #532]	; (8000b84 <task_run+0x2f4>)
 8000970:	f000 fddf 	bl	8001532 <HAL_GPIO_WritePin>
			kondisi=next_kondisi;
 8000974:	4b80      	ldr	r3, [pc, #512]	; (8000b78 <task_run+0x2e8>)
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	4b7c      	ldr	r3, [pc, #496]	; (8000b6c <task_run+0x2dc>)
 800097a:	701a      	strb	r2, [r3, #0]
		}

	}

	case k0:{
		LCD_SetCursor(0,0);
 800097c:	2100      	movs	r1, #0
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fca7 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 8000984:	487a      	ldr	r0, [pc, #488]	; (8000b70 <task_run+0x2e0>)
 8000986:	f7ff fc8f 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,1);
 800098a:	2101      	movs	r1, #1
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff fca0 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("   Minuman Rp.1000  ");
 8000992:	487d      	ldr	r0, [pc, #500]	; (8000b88 <task_run+0x2f8>)
 8000994:	f7ff fc88 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0, 3);
 8000998:	2103      	movs	r1, #3
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fc99 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("    Masukkan Koin   ");
 80009a0:	487a      	ldr	r0, [pc, #488]	; (8000b8c <task_run+0x2fc>)
 80009a2:	f7ff fc81 	bl	80002a8 <LCD_Print>

		if(Koin500_masuk()){
 80009a6:	f000 f9e7 	bl	8000d78 <Koin500_masuk>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d008      	beq.n	80009c2 <task_run+0x132>
			kondisi=buzzer;
 80009b0:	4b6e      	ldr	r3, [pc, #440]	; (8000b6c <task_run+0x2dc>)
 80009b2:	2202      	movs	r2, #2
 80009b4:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 80009b6:	4b71      	ldr	r3, [pc, #452]	; (8000b7c <task_run+0x2ec>)
 80009b8:	2203      	movs	r2, #3
 80009ba:	801a      	strh	r2, [r3, #0]
			next_kondisi=k500;
 80009bc:	4b6e      	ldr	r3, [pc, #440]	; (8000b78 <task_run+0x2e8>)
 80009be:	2204      	movs	r2, #4
 80009c0:	701a      	strb	r2, [r3, #0]
		}

		if(Koin1000_masuk()){
 80009c2:	f000 fa05 	bl	8000dd0 <Koin1000_masuk>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 81af 	beq.w	8000d2c <task_run+0x49c>
			kondisi=buzzer;
 80009ce:	4b67      	ldr	r3, [pc, #412]	; (8000b6c <task_run+0x2dc>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 80009d4:	4b69      	ldr	r3, [pc, #420]	; (8000b7c <task_run+0x2ec>)
 80009d6:	2203      	movs	r2, #3
 80009d8:	801a      	strh	r2, [r3, #0]
			next_kondisi=k1000;
 80009da:	4b67      	ldr	r3, [pc, #412]	; (8000b78 <task_run+0x2e8>)
 80009dc:	2205      	movs	r2, #5
 80009de:	701a      	strb	r2, [r3, #0]
		}

		break;
 80009e0:	e1a4      	b.n	8000d2c <task_run+0x49c>
	}

	case k500:{
		LCD_SetCursor(0,0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fc74 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 80009ea:	4861      	ldr	r0, [pc, #388]	; (8000b70 <task_run+0x2e0>)
 80009ec:	f7ff fc5c 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,1);
 80009f0:	2101      	movs	r1, #1
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff fc6d 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("   Minuman Rp.1000  ");
 80009f8:	4863      	ldr	r0, [pc, #396]	; (8000b88 <task_run+0x2f8>)
 80009fa:	f7ff fc55 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,3);
 80009fe:	2103      	movs	r1, #3
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fc66 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("    Masukkan Koin   ");
 8000a06:	4861      	ldr	r0, [pc, #388]	; (8000b8c <task_run+0x2fc>)
 8000a08:	f7ff fc4e 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(2,2);
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fc5f 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("Koin masuk = 500");
 8000a14:	485e      	ldr	r0, [pc, #376]	; (8000b90 <task_run+0x300>)
 8000a16:	f7ff fc47 	bl	80002a8 <LCD_Print>

		if(Koin500_masuk()){
 8000a1a:	f000 f9ad 	bl	8000d78 <Koin500_masuk>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d008      	beq.n	8000a36 <task_run+0x1a6>
			kondisi=buzzer;
 8000a24:	4b51      	ldr	r3, [pc, #324]	; (8000b6c <task_run+0x2dc>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000a2a:	4b54      	ldr	r3, [pc, #336]	; (8000b7c <task_run+0x2ec>)
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	801a      	strh	r2, [r3, #0]
			next_kondisi=k1000;
 8000a30:	4b51      	ldr	r3, [pc, #324]	; (8000b78 <task_run+0x2e8>)
 8000a32:	2205      	movs	r2, #5
 8000a34:	701a      	strb	r2, [r3, #0]
		}

		if(batal_ok()){
 8000a36:	f000 fa25 	bl	8000e84 <batal_ok>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00c      	beq.n	8000a5a <task_run+0x1ca>
			kondisi=buzzer;
 8000a40:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <task_run+0x2dc>)
 8000a42:	2202      	movs	r2, #2
 8000a44:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000a46:	4b4d      	ldr	r3, [pc, #308]	; (8000b7c <task_run+0x2ec>)
 8000a48:	2203      	movs	r2, #3
 8000a4a:	801a      	strh	r2, [r3, #0]
			kembali=500;
 8000a4c:	4b51      	ldr	r3, [pc, #324]	; (8000b94 <task_run+0x304>)
 8000a4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a52:	801a      	strh	r2, [r3, #0]
			next_kondisi=transaksi_batal;
 8000a54:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <task_run+0x2e8>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	701a      	strb	r2, [r3, #0]
		}

		if(Koin1000_masuk()){
 8000a5a:	f000 f9b9 	bl	8000dd0 <Koin1000_masuk>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 8165 	beq.w	8000d30 <task_run+0x4a0>
			kembali=500;
 8000a66:	4b4b      	ldr	r3, [pc, #300]	; (8000b94 <task_run+0x304>)
 8000a68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a6c:	801a      	strh	r2, [r3, #0]
			kondisi=buzzer;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <task_run+0x2dc>)
 8000a70:	2202      	movs	r2, #2
 8000a72:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000a74:	4b41      	ldr	r3, [pc, #260]	; (8000b7c <task_run+0x2ec>)
 8000a76:	2203      	movs	r2, #3
 8000a78:	801a      	strh	r2, [r3, #0]
			next_kondisi=koin_kembali;
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <task_run+0x2e8>)
 8000a7c:	2206      	movs	r2, #6
 8000a7e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000a80:	e156      	b.n	8000d30 <task_run+0x4a0>
	}

	case k1000:{
		LCD_SetCursor(0,0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fc24 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 8000a8a:	4839      	ldr	r0, [pc, #228]	; (8000b70 <task_run+0x2e0>)
 8000a8c:	f7ff fc0c 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,2);
 8000a90:	2102      	movs	r1, #2
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff fc1d 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("tekan tombol proses");
 8000a98:	483f      	ldr	r0, [pc, #252]	; (8000b98 <task_run+0x308>)
 8000a9a:	f7ff fc05 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(1,3);
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f7ff fc16 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("untuk melanjutkan");
 8000aa6:	483d      	ldr	r0, [pc, #244]	; (8000b9c <task_run+0x30c>)
 8000aa8:	f7ff fbfe 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(2,1);
 8000aac:	2101      	movs	r1, #1
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff fc0f 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("Koin masuk = 1000");
 8000ab4:	483a      	ldr	r0, [pc, #232]	; (8000ba0 <task_run+0x310>)
 8000ab6:	f7ff fbf7 	bl	80002a8 <LCD_Print>

		led_proses_ON;
 8000aba:	2200      	movs	r2, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	4831      	ldr	r0, [pc, #196]	; (8000b84 <task_run+0x2f4>)
 8000ac0:	f000 fd37 	bl	8001532 <HAL_GPIO_WritePin>
		kembali=0;
 8000ac4:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <task_run+0x304>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	801a      	strh	r2, [r3, #0]

		if(proses_ok()){
 8000aca:	f000 f9ad 	bl	8000e28 <proses_ok>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00d      	beq.n	8000af0 <task_run+0x260>
			led_proses_OFF;
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	482a      	ldr	r0, [pc, #168]	; (8000b84 <task_run+0x2f4>)
 8000ada:	f000 fd2a 	bl	8001532 <HAL_GPIO_WritePin>
			kondisi=buzzer;
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <task_run+0x2dc>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <task_run+0x2ec>)
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	801a      	strh	r2, [r3, #0]
			next_kondisi=minuman_out;
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <task_run+0x2e8>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	701a      	strb	r2, [r3, #0]
		}

		if(batal_ok()){
 8000af0:	f000 f9c8 	bl	8000e84 <batal_ok>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d011      	beq.n	8000b1e <task_run+0x28e>
			led_proses_OFF;
 8000afa:	2201      	movs	r2, #1
 8000afc:	2101      	movs	r1, #1
 8000afe:	4821      	ldr	r0, [pc, #132]	; (8000b84 <task_run+0x2f4>)
 8000b00:	f000 fd17 	bl	8001532 <HAL_GPIO_WritePin>
			kondisi=buzzer;
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <task_run+0x2dc>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <task_run+0x2ec>)
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	801a      	strh	r2, [r3, #0]
			kembali=1000;
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <task_run+0x304>)
 8000b12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b16:	801a      	strh	r2, [r3, #0]
			next_kondisi=transaksi_batal;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <task_run+0x2e8>)
 8000b1a:	2207      	movs	r2, #7
 8000b1c:	701a      	strb	r2, [r3, #0]
		}

		if(Koin500_masuk()){
 8000b1e:	f000 f92b 	bl	8000d78 <Koin500_masuk>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00c      	beq.n	8000b42 <task_run+0x2b2>
			kembali=500;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <task_run+0x304>)
 8000b2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b2e:	801a      	strh	r2, [r3, #0]
			kondisi=buzzer;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <task_run+0x2dc>)
 8000b32:	2202      	movs	r2, #2
 8000b34:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <task_run+0x2ec>)
 8000b38:	2203      	movs	r2, #3
 8000b3a:	801a      	strh	r2, [r3, #0]
			next_kondisi=koin_kembali;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <task_run+0x2e8>)
 8000b3e:	2206      	movs	r2, #6
 8000b40:	701a      	strb	r2, [r3, #0]
		}

		if(Koin1000_masuk()){
 8000b42:	f000 f945 	bl	8000dd0 <Koin1000_masuk>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f000 80f3 	beq.w	8000d34 <task_run+0x4a4>
			kembali=1000;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <task_run+0x304>)
 8000b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b54:	801a      	strh	r2, [r3, #0]
			kondisi=buzzer;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <task_run+0x2dc>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <task_run+0x2ec>)
 8000b5e:	2203      	movs	r2, #3
 8000b60:	801a      	strh	r2, [r3, #0]
			next_kondisi=koin_kembali;
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <task_run+0x2e8>)
 8000b64:	2206      	movs	r2, #6
 8000b66:	701a      	strb	r2, [r3, #0]
//			kondisi=buzzer;
//			delaytime=3;
//			next_kondisi=koin_kembali;
//		}

		break;
 8000b68:	e0e4      	b.n	8000d34 <task_run+0x4a4>
 8000b6a:	bf00      	nop
 8000b6c:	200000e4 	.word	0x200000e4
 8000b70:	08002d1c 	.word	0x08002d1c
 8000b74:	08002d34 	.word	0x08002d34
 8000b78:	200000e0 	.word	0x200000e0
 8000b7c:	200000e2 	.word	0x200000e2
 8000b80:	40010800 	.word	0x40010800
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	08002d4c 	.word	0x08002d4c
 8000b8c:	08002d64 	.word	0x08002d64
 8000b90:	08002d7c 	.word	0x08002d7c
 8000b94:	20000094 	.word	0x20000094
 8000b98:	08002d90 	.word	0x08002d90
 8000b9c:	08002da4 	.word	0x08002da4
 8000ba0:	08002db8 	.word	0x08002db8
	}

	case koin_kembali:{
		LCD_SetCursor(0,0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fb93 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 8000bac:	4863      	ldr	r0, [pc, #396]	; (8000d3c <task_run+0x4ac>)
 8000bae:	f7ff fb7b 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,1);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fb8c 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("                    ");
 8000bba:	4861      	ldr	r0, [pc, #388]	; (8000d40 <task_run+0x4b0>)
 8000bbc:	f7ff fb74 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(2, 2);
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f7ff fb85 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("uang mencukupi");
 8000bc8:	485e      	ldr	r0, [pc, #376]	; (8000d44 <task_run+0x4b4>)
 8000bca:	f7ff fb6d 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0, 3);
 8000bce:	2103      	movs	r1, #3
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff fb7e 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("koin kembali  ");
 8000bd6:	485c      	ldr	r0, [pc, #368]	; (8000d48 <task_run+0x4b8>)
 8000bd8:	f7ff fb66 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(14, 3);
 8000bdc:	2103      	movs	r1, #3
 8000bde:	200e      	movs	r0, #14
 8000be0:	f7ff fb77 	bl	80002d2 <LCD_SetCursor>
		LCD_PrintNum(kembali);
 8000be4:	4b59      	ldr	r3, [pc, #356]	; (8000d4c <task_run+0x4bc>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fbd0 	bl	8000390 <LCD_PrintNum>

		if(kembali==500){
 8000bf0:	4b56      	ldr	r3, [pc, #344]	; (8000d4c <task_run+0x4bc>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bf8:	d104      	bne.n	8000c04 <task_run+0x374>
			led_kembali500_ON;
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4854      	ldr	r0, [pc, #336]	; (8000d50 <task_run+0x4c0>)
 8000c00:	f000 fc97 	bl	8001532 <HAL_GPIO_WritePin>
		}
		if(kembali==1000){
 8000c04:	4b51      	ldr	r3, [pc, #324]	; (8000d4c <task_run+0x4bc>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c0c:	d105      	bne.n	8000c1a <task_run+0x38a>
			led_kembali1000_ON;
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c14:	484e      	ldr	r0, [pc, #312]	; (8000d50 <task_run+0x4c0>)
 8000c16:	f000 fc8c 	bl	8001532 <HAL_GPIO_WritePin>
		}
		led_koinOut_ON;
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	484d      	ldr	r0, [pc, #308]	; (8000d54 <task_run+0x4c4>)
 8000c20:	f000 fc87 	bl	8001532 <HAL_GPIO_WritePin>
		kondisi=delay;
 8000c24:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <task_run+0x4c8>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
		delaytime=500;
 8000c2a:	4b4c      	ldr	r3, [pc, #304]	; (8000d5c <task_run+0x4cc>)
 8000c2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c30:	801a      	strh	r2, [r3, #0]
		next_kondisi=k1000;
 8000c32:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <task_run+0x4d0>)
 8000c34:	2205      	movs	r2, #5
 8000c36:	701a      	strb	r2, [r3, #0]
		break;
 8000c38:	e07d      	b.n	8000d36 <task_run+0x4a6>
	}

	case transaksi_batal:{
		LCD_SetCursor(0,0);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fb48 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 8000c42:	483e      	ldr	r0, [pc, #248]	; (8000d3c <task_run+0x4ac>)
 8000c44:	f7ff fb30 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,1);
 8000c48:	2101      	movs	r1, #1
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fb41 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("                    ");
 8000c50:	483b      	ldr	r0, [pc, #236]	; (8000d40 <task_run+0x4b0>)
 8000c52:	f7ff fb29 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(2, 2);
 8000c56:	2102      	movs	r1, #2
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f7ff fb3a 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("Transaksi Batal");
 8000c5e:	4841      	ldr	r0, [pc, #260]	; (8000d64 <task_run+0x4d4>)
 8000c60:	f7ff fb22 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0, 3);
 8000c64:	2103      	movs	r1, #3
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fb33 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("uang kembali  ");
 8000c6c:	483e      	ldr	r0, [pc, #248]	; (8000d68 <task_run+0x4d8>)
 8000c6e:	f7ff fb1b 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(14, 3);
 8000c72:	2103      	movs	r1, #3
 8000c74:	200e      	movs	r0, #14
 8000c76:	f7ff fb2c 	bl	80002d2 <LCD_SetCursor>
		LCD_PrintNum(kembali);
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <task_run+0x4bc>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fb85 	bl	8000390 <LCD_PrintNum>

		if(kembali==500){
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <task_run+0x4bc>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c8e:	d104      	bne.n	8000c9a <task_run+0x40a>
			led_kembali500_ON;
 8000c90:	2200      	movs	r2, #0
 8000c92:	2102      	movs	r1, #2
 8000c94:	482e      	ldr	r0, [pc, #184]	; (8000d50 <task_run+0x4c0>)
 8000c96:	f000 fc4c 	bl	8001532 <HAL_GPIO_WritePin>
		}
		if(kembali==1000){
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <task_run+0x4bc>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ca2:	d105      	bne.n	8000cb0 <task_run+0x420>
			led_kembali1000_ON;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000caa:	4829      	ldr	r0, [pc, #164]	; (8000d50 <task_run+0x4c0>)
 8000cac:	f000 fc41 	bl	8001532 <HAL_GPIO_WritePin>
		}
		led_koinOut_ON;
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	4827      	ldr	r0, [pc, #156]	; (8000d54 <task_run+0x4c4>)
 8000cb6:	f000 fc3c 	bl	8001532 <HAL_GPIO_WritePin>
		kondisi=delay;
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <task_run+0x4c8>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
		delaytime=500;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <task_run+0x4cc>)
 8000cc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cc6:	801a      	strh	r2, [r3, #0]
		next_kondisi=start;
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <task_run+0x4d0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
		break;
 8000cce:	e032      	b.n	8000d36 <task_run+0x4a6>
	}

	case minuman_out:{
		LCD_SetCursor(0,0);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fafd 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <task_run+0x4ac>)
 8000cda:	f7ff fae5 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(1,1);
 8000cde:	2101      	movs	r1, #1
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff faf6 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("pembelian berhasil");
 8000ce6:	4821      	ldr	r0, [pc, #132]	; (8000d6c <task_run+0x4dc>)
 8000ce8:	f7ff fade 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(1,2);
 8000cec:	2102      	movs	r1, #2
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff faef 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("silahkan mengambil");
 8000cf4:	481e      	ldr	r0, [pc, #120]	; (8000d70 <task_run+0x4e0>)
 8000cf6:	f7ff fad7 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,3);
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fae8 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("       minuman      ");
 8000d02:	481c      	ldr	r0, [pc, #112]	; (8000d74 <task_run+0x4e4>)
 8000d04:	f7ff fad0 	bl	80002a8 <LCD_Print>

		led_minuman_ON;
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	4811      	ldr	r0, [pc, #68]	; (8000d54 <task_run+0x4c4>)
 8000d0e:	f000 fc10 	bl	8001532 <HAL_GPIO_WritePin>
		kondisi=delay;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <task_run+0x4c8>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
		delaytime=2000;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <task_run+0x4cc>)
 8000d1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d1e:	801a      	strh	r2, [r3, #0]
		next_kondisi=start;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <task_run+0x4d0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
		break;
 8000d26:	e006      	b.n	8000d36 <task_run+0x4a6>
		break;
 8000d28:	bf00      	nop
 8000d2a:	e004      	b.n	8000d36 <task_run+0x4a6>
		break;
 8000d2c:	bf00      	nop
 8000d2e:	e002      	b.n	8000d36 <task_run+0x4a6>
		break;
 8000d30:	bf00      	nop
 8000d32:	e000      	b.n	8000d36 <task_run+0x4a6>
		break;
 8000d34:	bf00      	nop

	}

	}
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08002d1c 	.word	0x08002d1c
 8000d40:	08002dcc 	.word	0x08002dcc
 8000d44:	08002de4 	.word	0x08002de4
 8000d48:	08002df4 	.word	0x08002df4
 8000d4c:	20000094 	.word	0x20000094
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	40010800 	.word	0x40010800
 8000d58:	200000e4 	.word	0x200000e4
 8000d5c:	200000e2 	.word	0x200000e2
 8000d60:	200000e0 	.word	0x200000e0
 8000d64:	08002e04 	.word	0x08002e04
 8000d68:	08002e14 	.word	0x08002e14
 8000d6c:	08002e24 	.word	0x08002e24
 8000d70:	08002e38 	.word	0x08002e38
 8000d74:	08002e4c 	.word	0x08002e4c

08000d78 <Koin500_masuk>:

unsigned char Koin500_masuk(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(Koin_500_GPIO_Port,Koin_500_Pin)== GPIO_PIN_RESET){
 8000d82:	2101      	movs	r1, #1
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <Koin500_masuk+0x50>)
 8000d86:	f000 fbbd 	bl	8001504 <HAL_GPIO_ReadPin>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d106      	bne.n	8000d9e <Koin500_masuk+0x26>
//		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
		debounce=(debounce<<2);
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <Koin500_masuk+0x54>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <Koin500_masuk+0x54>)
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e009      	b.n	8000db2 <Koin500_masuk+0x3a>
	} else {
		debounce= (debounce<<2)|3;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <Koin500_masuk+0x54>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	f043 0303 	orr.w	r3, r3, #3
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <Koin500_masuk+0x54>)
 8000db0:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
	}
	if (debounce==0x03) {
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <Koin500_masuk+0x54>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d101      	bne.n	8000dbe <Koin500_masuk+0x46>
		detectedFLag=1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <Koin1000_masuk>:

unsigned char Koin1000_masuk(void){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(Koin_1000_GPIO_Port,Koin_1000_Pin)== GPIO_PIN_RESET){
 8000dda:	2102      	movs	r1, #2
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <Koin1000_masuk+0x50>)
 8000dde:	f000 fb91 	bl	8001504 <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d106      	bne.n	8000df6 <Koin1000_masuk+0x26>
//		HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
		debounce=(debounce<<2);
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <Koin1000_masuk+0x54>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <Koin1000_masuk+0x54>)
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e009      	b.n	8000e0a <Koin1000_masuk+0x3a>
	} else {
		debounce= (debounce<<2)|3;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <Koin1000_masuk+0x54>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	f043 0303 	orr.w	r3, r3, #3
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <Koin1000_masuk+0x54>)
 8000e08:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
	}
	if (debounce==0x03) {
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <Koin1000_masuk+0x54>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d101      	bne.n	8000e16 <Koin1000_masuk+0x46>
		detectedFLag=1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40010800 	.word	0x40010800
 8000e24:	20000005 	.word	0x20000005

08000e28 <proses_ok>:

unsigned char proses_ok(void){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_Process_GPIO_Port,PB_Process_Pin)== GPIO_PIN_RESET){
 8000e32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e36:	4811      	ldr	r0, [pc, #68]	; (8000e7c <proses_ok+0x54>)
 8000e38:	f000 fb64 	bl	8001504 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d106      	bne.n	8000e50 <proses_ok+0x28>
		debounce=(debounce<<2);
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <proses_ok+0x58>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <proses_ok+0x58>)
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e009      	b.n	8000e64 <proses_ok+0x3c>
	} else {
		debounce= (debounce<<2)|3;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <proses_ok+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	f043 0303 	orr.w	r3, r3, #3
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <proses_ok+0x58>)
 8000e62:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <proses_ok+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d101      	bne.n	8000e70 <proses_ok+0x48>
		detectedFLag=1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	20000006 	.word	0x20000006

08000e84 <batal_ok>:

unsigned char batal_ok(void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_Cancel_GPIO_Port,PB_Cancel_Pin)== GPIO_PIN_RESET){
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <batal_ok+0x54>)
 8000e94:	f000 fb36 	bl	8001504 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <batal_ok+0x28>
		debounce=(debounce<<2);
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <batal_ok+0x58>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <batal_ok+0x58>)
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e009      	b.n	8000ec0 <batal_ok+0x3c>
	} else {
		debounce= (debounce<<2)|3;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <batal_ok+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	f043 0303 	orr.w	r3, r3, #3
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <batal_ok+0x58>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <batal_ok+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d101      	bne.n	8000ecc <batal_ok+0x48>
		detectedFLag=1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40011000 	.word	0x40011000
 8000edc:	20000007 	.word	0x20000007

08000ee0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ee0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ee2:	e003      	b.n	8000eec <LoopCopyDataInit>

08000ee4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ee6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ee8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eea:	3104      	adds	r1, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eec:	480a      	ldr	r0, [pc, #40]	; (8000f18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ef0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ef2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ef4:	d3f6      	bcc.n	8000ee4 <CopyDataInit>
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ef8:	e002      	b.n	8000f00 <LoopFillZerobss>

08000efa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000efc:	f842 3b04 	str.w	r3, [r2], #4

08000f00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f04:	d3f9      	bcc.n	8000efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f06:	f7ff fc67 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f001 fabb 	bl	8002484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff fa57 	bl	80003c0 <main>
  bx lr
 8000f12:	4770      	bx	lr
  ldr r3, =_sidata
 8000f14:	08002ec4 	.word	0x08002ec4
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f1c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000f20:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000f24:	200000f0 	.word	0x200000f0

08000f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x28>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f945 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fb88 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f95d 	bl	8001236 <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 f925 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	2000000c 	.word	0x2000000c
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	2000000c 	.word	0x2000000c
 8000fd8:	200000e8 	.word	0x200000e8

08000fdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	200000e8 	.word	0x200000e8

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff fff0 	bl	8000fdc <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_Delay+0x40>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffe0 	bl	8000fdc <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000000c 	.word	0x2000000c

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4906      	ldr	r1, [pc, #24]	; (80010cc <__NVIC_EnableIRQ+0x34>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff90 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff2d 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff42 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff90 	bl	8001124 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5f 	bl	80010d0 <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff35 	bl	8001098 <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffa2 	bl	8001188 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b08b      	sub	sp, #44	; 0x2c
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e127      	b.n	80014b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001264:	2201      	movs	r2, #1
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8116 	bne.w	80014ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b12      	cmp	r3, #18
 8001288:	d034      	beq.n	80012f4 <HAL_GPIO_Init+0xa4>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d80d      	bhi.n	80012aa <HAL_GPIO_Init+0x5a>
 800128e:	2b02      	cmp	r3, #2
 8001290:	d02b      	beq.n	80012ea <HAL_GPIO_Init+0x9a>
 8001292:	2b02      	cmp	r3, #2
 8001294:	d804      	bhi.n	80012a0 <HAL_GPIO_Init+0x50>
 8001296:	2b00      	cmp	r3, #0
 8001298:	d031      	beq.n	80012fe <HAL_GPIO_Init+0xae>
 800129a:	2b01      	cmp	r3, #1
 800129c:	d01c      	beq.n	80012d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800129e:	e048      	b.n	8001332 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d043      	beq.n	800132c <HAL_GPIO_Init+0xdc>
 80012a4:	2b11      	cmp	r3, #17
 80012a6:	d01b      	beq.n	80012e0 <HAL_GPIO_Init+0x90>
          break;
 80012a8:	e043      	b.n	8001332 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012aa:	4a89      	ldr	r2, [pc, #548]	; (80014d0 <HAL_GPIO_Init+0x280>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d026      	beq.n	80012fe <HAL_GPIO_Init+0xae>
 80012b0:	4a87      	ldr	r2, [pc, #540]	; (80014d0 <HAL_GPIO_Init+0x280>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d806      	bhi.n	80012c4 <HAL_GPIO_Init+0x74>
 80012b6:	4a87      	ldr	r2, [pc, #540]	; (80014d4 <HAL_GPIO_Init+0x284>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d020      	beq.n	80012fe <HAL_GPIO_Init+0xae>
 80012bc:	4a86      	ldr	r2, [pc, #536]	; (80014d8 <HAL_GPIO_Init+0x288>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d01d      	beq.n	80012fe <HAL_GPIO_Init+0xae>
          break;
 80012c2:	e036      	b.n	8001332 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012c4:	4a85      	ldr	r2, [pc, #532]	; (80014dc <HAL_GPIO_Init+0x28c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d019      	beq.n	80012fe <HAL_GPIO_Init+0xae>
 80012ca:	4a85      	ldr	r2, [pc, #532]	; (80014e0 <HAL_GPIO_Init+0x290>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d016      	beq.n	80012fe <HAL_GPIO_Init+0xae>
 80012d0:	4a84      	ldr	r2, [pc, #528]	; (80014e4 <HAL_GPIO_Init+0x294>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0xae>
          break;
 80012d6:	e02c      	b.n	8001332 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	623b      	str	r3, [r7, #32]
          break;
 80012de:	e028      	b.n	8001332 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	3304      	adds	r3, #4
 80012e6:	623b      	str	r3, [r7, #32]
          break;
 80012e8:	e023      	b.n	8001332 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	3308      	adds	r3, #8
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e01e      	b.n	8001332 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	330c      	adds	r3, #12
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e019      	b.n	8001332 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001306:	2304      	movs	r3, #4
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e012      	b.n	8001332 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001314:	2308      	movs	r3, #8
 8001316:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	611a      	str	r2, [r3, #16]
          break;
 800131e:	e008      	b.n	8001332 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001320:	2308      	movs	r3, #8
 8001322:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	615a      	str	r2, [r3, #20]
          break;
 800132a:	e002      	b.n	8001332 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2bff      	cmp	r3, #255	; 0xff
 8001336:	d801      	bhi.n	800133c <HAL_GPIO_Init+0xec>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	e001      	b.n	8001340 <HAL_GPIO_Init+0xf0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3304      	adds	r3, #4
 8001340:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2bff      	cmp	r3, #255	; 0xff
 8001346:	d802      	bhi.n	800134e <HAL_GPIO_Init+0xfe>
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	e002      	b.n	8001354 <HAL_GPIO_Init+0x104>
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	3b08      	subs	r3, #8
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	210f      	movs	r1, #15
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	401a      	ands	r2, r3
 8001366:	6a39      	ldr	r1, [r7, #32]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	431a      	orrs	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8096 	beq.w	80014ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001382:	4b59      	ldr	r3, [pc, #356]	; (80014e8 <HAL_GPIO_Init+0x298>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a58      	ldr	r2, [pc, #352]	; (80014e8 <HAL_GPIO_Init+0x298>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <HAL_GPIO_Init+0x298>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800139a:	4a54      	ldr	r2, [pc, #336]	; (80014ec <HAL_GPIO_Init+0x29c>)
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4b      	ldr	r2, [pc, #300]	; (80014f0 <HAL_GPIO_Init+0x2a0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x19e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4a      	ldr	r2, [pc, #296]	; (80014f4 <HAL_GPIO_Init+0x2a4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x19a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a49      	ldr	r2, [pc, #292]	; (80014f8 <HAL_GPIO_Init+0x2a8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x196>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a48      	ldr	r2, [pc, #288]	; (80014fc <HAL_GPIO_Init+0x2ac>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x192>
 80013de:	2303      	movs	r3, #3
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x1a0>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x1a0>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x1a0>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x1a0>
 80013ee:	2300      	movs	r3, #0
 80013f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001400:	493a      	ldr	r1, [pc, #232]	; (80014ec <HAL_GPIO_Init+0x29c>)
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800141a:	4b39      	ldr	r3, [pc, #228]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4938      	ldr	r1, [pc, #224]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
 8001426:	e006      	b.n	8001436 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	43db      	mvns	r3, r3
 8001430:	4933      	ldr	r1, [pc, #204]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001432:	4013      	ands	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	492e      	ldr	r1, [pc, #184]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
 800144e:	e006      	b.n	800145e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	43db      	mvns	r3, r3
 8001458:	4929      	ldr	r1, [pc, #164]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 800145a:	4013      	ands	r3, r2
 800145c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	4924      	ldr	r1, [pc, #144]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	608b      	str	r3, [r1, #8]
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	43db      	mvns	r3, r3
 8001480:	491f      	ldr	r1, [pc, #124]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001482:	4013      	ands	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	491a      	ldr	r1, [pc, #104]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	60cb      	str	r3, [r1, #12]
 800149e:	e006      	b.n	80014ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	4915      	ldr	r1, [pc, #84]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3301      	adds	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f47f aed0 	bne.w	8001264 <HAL_GPIO_Init+0x14>
  }
}
 80014c4:	bf00      	nop
 80014c6:	372c      	adds	r7, #44	; 0x2c
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	10210000 	.word	0x10210000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	10120000 	.word	0x10120000
 80014dc:	10310000 	.word	0x10310000
 80014e0:	10320000 	.word	0x10320000
 80014e4:	10220000 	.word	0x10220000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40010800 	.word	0x40010800
 80014f4:	40010c00 	.word	0x40010c00
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40011400 	.word	0x40011400
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e001      	b.n	8001526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]
 800153e:	4613      	mov	r3, r2
 8001540:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001542:	787b      	ldrb	r3, [r7, #1]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001548:	887a      	ldrh	r2, [r7, #2]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800154e:	e003      	b.n	8001558 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	041a      	lsls	r2, r3, #16
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	611a      	str	r2, [r3, #16]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001580:	e002      	b.n	8001588 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	611a      	str	r2, [r3, #16]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
	...

08001594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e26c      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8087 	beq.w	80016c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b4:	4b92      	ldr	r3, [pc, #584]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d00c      	beq.n	80015da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c0:	4b8f      	ldr	r3, [pc, #572]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d112      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5e>
 80015cc:	4b8c      	ldr	r3, [pc, #560]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d8:	d10b      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015da:	4b89      	ldr	r3, [pc, #548]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d06c      	beq.n	80016c0 <HAL_RCC_OscConfig+0x12c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d168      	bne.n	80016c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e246      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x76>
 80015fc:	4b80      	ldr	r3, [pc, #512]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a7f      	ldr	r2, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e02e      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x98>
 8001612:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a7a      	ldr	r2, [pc, #488]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b78      	ldr	r3, [pc, #480]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a77      	ldr	r2, [pc, #476]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0xbc>
 8001636:	4b72      	ldr	r3, [pc, #456]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a71      	ldr	r2, [pc, #452]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a6e      	ldr	r2, [pc, #440]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 8001650:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6a      	ldr	r2, [pc, #424]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a67      	ldr	r2, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fcb4 	bl	8000fdc <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fcb0 	bl	8000fdc <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1fa      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xe4>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fca0 	bl	8000fdc <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fc9c 	bl	8000fdc <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1e6      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x10c>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d063      	beq.n	8001796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ce:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016da:	4b49      	ldr	r3, [pc, #292]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d11c      	bne.n	8001720 <HAL_RCC_OscConfig+0x18c>
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	4b43      	ldr	r3, [pc, #268]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x176>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e1ba      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4939      	ldr	r1, [pc, #228]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	e03a      	b.n	8001796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_RCC_OscConfig+0x270>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fc55 	bl	8000fdc <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fc51 	bl	8000fdc <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e19b      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4927      	ldr	r1, [pc, #156]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_RCC_OscConfig+0x270>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fc34 	bl	8000fdc <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff fc30 	bl	8000fdc <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e17a      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d03a      	beq.n	8001818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d019      	beq.n	80017de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_RCC_OscConfig+0x274>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff fc14 	bl	8000fdc <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fc10 	bl	8000fdc <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e15a      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f000 faa8 	bl	8001d2c <RCC_Delay>
 80017dc:	e01c      	b.n	8001818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_OscConfig+0x274>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e4:	f7ff fbfa 	bl	8000fdc <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ea:	e00f      	b.n	800180c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff fbf6 	bl	8000fdc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d908      	bls.n	800180c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e140      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	42420000 	.word	0x42420000
 8001808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	4b9e      	ldr	r3, [pc, #632]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e9      	bne.n	80017ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a6 	beq.w	8001972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b97      	ldr	r3, [pc, #604]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b94      	ldr	r3, [pc, #592]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a93      	ldr	r2, [pc, #588]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b91      	ldr	r3, [pc, #580]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184e:	2301      	movs	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b8e      	ldr	r3, [pc, #568]	; (8001a8c <HAL_RCC_OscConfig+0x4f8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d118      	bne.n	8001890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	4b8b      	ldr	r3, [pc, #556]	; (8001a8c <HAL_RCC_OscConfig+0x4f8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a8a      	ldr	r2, [pc, #552]	; (8001a8c <HAL_RCC_OscConfig+0x4f8>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff fbb7 	bl	8000fdc <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff fbb3 	bl	8000fdc <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0fd      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4b81      	ldr	r3, [pc, #516]	; (8001a8c <HAL_RCC_OscConfig+0x4f8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x312>
 8001898:	4b7b      	ldr	r3, [pc, #492]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a7a      	ldr	r2, [pc, #488]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e02d      	b.n	8001902 <HAL_RCC_OscConfig+0x36e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x334>
 80018ae:	4b76      	ldr	r3, [pc, #472]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a75      	ldr	r2, [pc, #468]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a72      	ldr	r2, [pc, #456]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6213      	str	r3, [r2, #32]
 80018c6:	e01c      	b.n	8001902 <HAL_RCC_OscConfig+0x36e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d10c      	bne.n	80018ea <HAL_RCC_OscConfig+0x356>
 80018d0:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a6c      	ldr	r2, [pc, #432]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a69      	ldr	r2, [pc, #420]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	e00b      	b.n	8001902 <HAL_RCC_OscConfig+0x36e>
 80018ea:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a66      	ldr	r2, [pc, #408]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a63      	ldr	r2, [pc, #396]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d015      	beq.n	8001936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190a:	f7ff fb67 	bl	8000fdc <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff fb63 	bl	8000fdc <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0ab      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ee      	beq.n	8001912 <HAL_RCC_OscConfig+0x37e>
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff fb51 	bl	8000fdc <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff fb4d 	bl	8000fdc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e095      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d105      	bne.n	8001972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8081 	beq.w	8001a7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d061      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d146      	bne.n	8001a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <HAL_RCC_OscConfig+0x4fc>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fb21 	bl	8000fdc <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff fb1d 	bl	8000fdc <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e067      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d108      	bne.n	80019d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	492d      	ldr	r1, [pc, #180]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a19      	ldr	r1, [r3, #32]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	430b      	orrs	r3, r1
 80019ea:	4927      	ldr	r1, [pc, #156]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x4fc>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff faf1 	bl	8000fdc <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff faed 	bl	8000fdc <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e037      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x46a>
 8001a1c:	e02f      	b.n	8001a7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <HAL_RCC_OscConfig+0x4fc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fada 	bl	8000fdc <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff fad6 	bl	8000fdc <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e020      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x498>
 8001a4a:	e018      	b.n	8001a7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e013      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	42420060 	.word	0x42420060

08001a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0d0      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d910      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 0207 	bic.w	r2, r3, #7
 8001abe:	4965      	ldr	r1, [pc, #404]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b8      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af0:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001afa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a52      	ldr	r2, [pc, #328]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	494d      	ldr	r1, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d040      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d115      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e07f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e073      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4936      	ldr	r1, [pc, #216]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff fa2a 	bl	8000fdc <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff fa26 	bl	8000fdc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e053      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d210      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	4922      	ldr	r1, [pc, #136]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e032      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4916      	ldr	r1, [pc, #88]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c22:	f000 f821 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c26:	4601      	mov	r1, r0
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_RCC_ClockConfig+0x1c8>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	fa21 f303 	lsr.w	r3, r1, r3
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1cc>)
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1d0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f988 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08002e78 	.word	0x08002e78
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000008 	.word	0x20000008

08001c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	b490      	push	{r4, r7}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c70:	1d3c      	adds	r4, r7, #4
 8001c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x46>
 8001ca6:	e02d      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001caa:	623b      	str	r3, [r7, #32]
      break;
 8001cac:	e02d      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	0c9b      	lsrs	r3, r3, #18
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cba:	4413      	add	r3, r2
 8001cbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0c5b      	lsrs	r3, r3, #17
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cda:	4413      	add	r3, r2
 8001cdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ce0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce6:	fb02 f203 	mul.w	r2, r2, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	e004      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	623b      	str	r3, [r7, #32]
      break;
 8001d02:	e002      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d06:	623b      	str	r3, [r7, #32]
      break;
 8001d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc90      	pop	{r4, r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	08002e64 	.word	0x08002e64
 8001d1c:	08002e74 	.word	0x08002e74
 8001d20:	40021000 	.word	0x40021000
 8001d24:	007a1200 	.word	0x007a1200
 8001d28:	003d0900 	.word	0x003d0900

08001d2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <RCC_Delay+0x34>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <RCC_Delay+0x38>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0a5b      	lsrs	r3, r3, #9
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d48:	bf00      	nop
  }
  while (Delay --);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	60fa      	str	r2, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f9      	bne.n	8001d48 <RCC_Delay+0x1c>
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000
 8001d64:	10624dd3 	.word	0x10624dd3

08001d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e01d      	b.n	8001db6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fc96 	bl	80006c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f000 fa18 	bl	80021dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b06      	cmp	r3, #6
 8001de6:	d007      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d122      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d11b      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0202 	mvn.w	r2, #2
 8001e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f9ad 	bl	80021a6 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f9a0 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f9af 	bl	80021b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d122      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0204 	mvn.w	r2, #4
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f983 	bl	80021a6 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f976 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f985 	bl	80021b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0208 	mvn.w	r2, #8
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f959 	bl	80021a6 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f94c 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f95b 	bl	80021b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0210 	mvn.w	r2, #16
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2208      	movs	r2, #8
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f92f 	bl	80021a6 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f922 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f931 	bl	80021b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0201 	mvn.w	r2, #1
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8fd 	bl	8002182 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d107      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fa59 	bl	8002466 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbe:	2b40      	cmp	r3, #64	; 0x40
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fcc:	2b40      	cmp	r3, #64	; 0x40
 8001fce:	d107      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8f5 	bl	80021ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d107      	bne.n	800200c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0220 	mvn.w	r2, #32
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fa24 	bl	8002454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_TIM_ConfigClockSource+0x18>
 8002028:	2302      	movs	r3, #2
 800202a:	e0a6      	b.n	800217a <HAL_TIM_ConfigClockSource+0x166>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800204a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002052:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d067      	beq.n	8002134 <HAL_TIM_ConfigClockSource+0x120>
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d80b      	bhi.n	8002080 <HAL_TIM_ConfigClockSource+0x6c>
 8002068:	2b10      	cmp	r3, #16
 800206a:	d073      	beq.n	8002154 <HAL_TIM_ConfigClockSource+0x140>
 800206c:	2b10      	cmp	r3, #16
 800206e:	d802      	bhi.n	8002076 <HAL_TIM_ConfigClockSource+0x62>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d06f      	beq.n	8002154 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002074:	e078      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002076:	2b20      	cmp	r3, #32
 8002078:	d06c      	beq.n	8002154 <HAL_TIM_ConfigClockSource+0x140>
 800207a:	2b30      	cmp	r3, #48	; 0x30
 800207c:	d06a      	beq.n	8002154 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800207e:	e073      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002080:	2b70      	cmp	r3, #112	; 0x70
 8002082:	d00d      	beq.n	80020a0 <HAL_TIM_ConfigClockSource+0x8c>
 8002084:	2b70      	cmp	r3, #112	; 0x70
 8002086:	d804      	bhi.n	8002092 <HAL_TIM_ConfigClockSource+0x7e>
 8002088:	2b50      	cmp	r3, #80	; 0x50
 800208a:	d033      	beq.n	80020f4 <HAL_TIM_ConfigClockSource+0xe0>
 800208c:	2b60      	cmp	r3, #96	; 0x60
 800208e:	d041      	beq.n	8002114 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002090:	e06a      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002096:	d066      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x152>
 8002098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800209c:	d017      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800209e:	e063      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6899      	ldr	r1, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f000 f96d 	bl	800238e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	609a      	str	r2, [r3, #8]
      break;
 80020cc:	e04c      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f000 f956 	bl	800238e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020f0:	609a      	str	r2, [r3, #8]
      break;
 80020f2:	e039      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	461a      	mov	r2, r3
 8002102:	f000 f8cd 	bl	80022a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2150      	movs	r1, #80	; 0x50
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f924 	bl	800235a <TIM_ITRx_SetConfig>
      break;
 8002112:	e029      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	461a      	mov	r2, r3
 8002122:	f000 f8eb 	bl	80022fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2160      	movs	r1, #96	; 0x60
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f914 	bl	800235a <TIM_ITRx_SetConfig>
      break;
 8002132:	e019      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	461a      	mov	r2, r3
 8002142:	f000 f8ad 	bl	80022a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2140      	movs	r1, #64	; 0x40
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f904 	bl	800235a <TIM_ITRx_SetConfig>
      break;
 8002152:	e009      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	4610      	mov	r0, r2
 8002160:	f000 f8fb 	bl	800235a <TIM_ITRx_SetConfig>
      break;
 8002164:	e000      	b.n	8002168 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a29      	ldr	r2, [pc, #164]	; (8002294 <TIM_Base_SetConfig+0xb8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00b      	beq.n	800220c <TIM_Base_SetConfig+0x30>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d007      	beq.n	800220c <TIM_Base_SetConfig+0x30>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a26      	ldr	r2, [pc, #152]	; (8002298 <TIM_Base_SetConfig+0xbc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d003      	beq.n	800220c <TIM_Base_SetConfig+0x30>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a25      	ldr	r2, [pc, #148]	; (800229c <TIM_Base_SetConfig+0xc0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d108      	bne.n	800221e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <TIM_Base_SetConfig+0xb8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00b      	beq.n	800223e <TIM_Base_SetConfig+0x62>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222c:	d007      	beq.n	800223e <TIM_Base_SetConfig+0x62>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a19      	ldr	r2, [pc, #100]	; (8002298 <TIM_Base_SetConfig+0xbc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d003      	beq.n	800223e <TIM_Base_SetConfig+0x62>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <TIM_Base_SetConfig+0xc0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d108      	bne.n	8002250 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a07      	ldr	r2, [pc, #28]	; (8002294 <TIM_Base_SetConfig+0xb8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d103      	bne.n	8002284 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	615a      	str	r2, [r3, #20]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800

080022a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f023 0201 	bic.w	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f023 030a 	bic.w	r3, r3, #10
 80022dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	621a      	str	r2, [r3, #32]
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f023 0210 	bic.w	r2, r3, #16
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002326:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	031b      	lsls	r3, r3, #12
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002338:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	621a      	str	r2, [r3, #32]
}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	f043 0307 	orr.w	r3, r3, #7
 800237c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	609a      	str	r2, [r3, #8]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800238e:	b480      	push	{r7}
 8002390:	b087      	sub	sp, #28
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	021a      	lsls	r2, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	609a      	str	r2, [r3, #8]
}
 80023c2:	bf00      	nop
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e032      	b.n	800244a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800241c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4313      	orrs	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <__errno>:
 8002478:	4b01      	ldr	r3, [pc, #4]	; (8002480 <__errno+0x8>)
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000010 	.word	0x20000010

08002484 <__libc_init_array>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	2500      	movs	r5, #0
 8002488:	4e0c      	ldr	r6, [pc, #48]	; (80024bc <__libc_init_array+0x38>)
 800248a:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <__libc_init_array+0x3c>)
 800248c:	1ba4      	subs	r4, r4, r6
 800248e:	10a4      	asrs	r4, r4, #2
 8002490:	42a5      	cmp	r5, r4
 8002492:	d109      	bne.n	80024a8 <__libc_init_array+0x24>
 8002494:	f000 fc34 	bl	8002d00 <_init>
 8002498:	2500      	movs	r5, #0
 800249a:	4e0a      	ldr	r6, [pc, #40]	; (80024c4 <__libc_init_array+0x40>)
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <__libc_init_array+0x44>)
 800249e:	1ba4      	subs	r4, r4, r6
 80024a0:	10a4      	asrs	r4, r4, #2
 80024a2:	42a5      	cmp	r5, r4
 80024a4:	d105      	bne.n	80024b2 <__libc_init_array+0x2e>
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ac:	4798      	blx	r3
 80024ae:	3501      	adds	r5, #1
 80024b0:	e7ee      	b.n	8002490 <__libc_init_array+0xc>
 80024b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024b6:	4798      	blx	r3
 80024b8:	3501      	adds	r5, #1
 80024ba:	e7f2      	b.n	80024a2 <__libc_init_array+0x1e>
 80024bc:	08002ebc 	.word	0x08002ebc
 80024c0:	08002ebc 	.word	0x08002ebc
 80024c4:	08002ebc 	.word	0x08002ebc
 80024c8:	08002ec0 	.word	0x08002ec0

080024cc <memset>:
 80024cc:	4603      	mov	r3, r0
 80024ce:	4402      	add	r2, r0
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memset+0xa>
 80024d4:	4770      	bx	lr
 80024d6:	f803 1b01 	strb.w	r1, [r3], #1
 80024da:	e7f9      	b.n	80024d0 <memset+0x4>

080024dc <siprintf>:
 80024dc:	b40e      	push	{r1, r2, r3}
 80024de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024e2:	b500      	push	{lr}
 80024e4:	b09c      	sub	sp, #112	; 0x70
 80024e6:	ab1d      	add	r3, sp, #116	; 0x74
 80024e8:	9002      	str	r0, [sp, #8]
 80024ea:	9006      	str	r0, [sp, #24]
 80024ec:	9107      	str	r1, [sp, #28]
 80024ee:	9104      	str	r1, [sp, #16]
 80024f0:	4808      	ldr	r0, [pc, #32]	; (8002514 <siprintf+0x38>)
 80024f2:	4909      	ldr	r1, [pc, #36]	; (8002518 <siprintf+0x3c>)
 80024f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80024f8:	9105      	str	r1, [sp, #20]
 80024fa:	6800      	ldr	r0, [r0, #0]
 80024fc:	a902      	add	r1, sp, #8
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	f000 f866 	bl	80025d0 <_svfiprintf_r>
 8002504:	2200      	movs	r2, #0
 8002506:	9b02      	ldr	r3, [sp, #8]
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	b01c      	add	sp, #112	; 0x70
 800250c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002510:	b003      	add	sp, #12
 8002512:	4770      	bx	lr
 8002514:	20000010 	.word	0x20000010
 8002518:	ffff0208 	.word	0xffff0208

0800251c <__ssputs_r>:
 800251c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002520:	688e      	ldr	r6, [r1, #8]
 8002522:	4682      	mov	sl, r0
 8002524:	429e      	cmp	r6, r3
 8002526:	460c      	mov	r4, r1
 8002528:	4690      	mov	r8, r2
 800252a:	4699      	mov	r9, r3
 800252c:	d837      	bhi.n	800259e <__ssputs_r+0x82>
 800252e:	898a      	ldrh	r2, [r1, #12]
 8002530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002534:	d031      	beq.n	800259a <__ssputs_r+0x7e>
 8002536:	2302      	movs	r3, #2
 8002538:	6825      	ldr	r5, [r4, #0]
 800253a:	6909      	ldr	r1, [r1, #16]
 800253c:	1a6f      	subs	r7, r5, r1
 800253e:	6965      	ldr	r5, [r4, #20]
 8002540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002544:	fb95 f5f3 	sdiv	r5, r5, r3
 8002548:	f109 0301 	add.w	r3, r9, #1
 800254c:	443b      	add	r3, r7
 800254e:	429d      	cmp	r5, r3
 8002550:	bf38      	it	cc
 8002552:	461d      	movcc	r5, r3
 8002554:	0553      	lsls	r3, r2, #21
 8002556:	d530      	bpl.n	80025ba <__ssputs_r+0x9e>
 8002558:	4629      	mov	r1, r5
 800255a:	f000 fb37 	bl	8002bcc <_malloc_r>
 800255e:	4606      	mov	r6, r0
 8002560:	b950      	cbnz	r0, 8002578 <__ssputs_r+0x5c>
 8002562:	230c      	movs	r3, #12
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f8ca 3000 	str.w	r3, [sl]
 800256c:	89a3      	ldrh	r3, [r4, #12]
 800256e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002572:	81a3      	strh	r3, [r4, #12]
 8002574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002578:	463a      	mov	r2, r7
 800257a:	6921      	ldr	r1, [r4, #16]
 800257c:	f000 fab6 	bl	8002aec <memcpy>
 8002580:	89a3      	ldrh	r3, [r4, #12]
 8002582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258a:	81a3      	strh	r3, [r4, #12]
 800258c:	6126      	str	r6, [r4, #16]
 800258e:	443e      	add	r6, r7
 8002590:	6026      	str	r6, [r4, #0]
 8002592:	464e      	mov	r6, r9
 8002594:	6165      	str	r5, [r4, #20]
 8002596:	1bed      	subs	r5, r5, r7
 8002598:	60a5      	str	r5, [r4, #8]
 800259a:	454e      	cmp	r6, r9
 800259c:	d900      	bls.n	80025a0 <__ssputs_r+0x84>
 800259e:	464e      	mov	r6, r9
 80025a0:	4632      	mov	r2, r6
 80025a2:	4641      	mov	r1, r8
 80025a4:	6820      	ldr	r0, [r4, #0]
 80025a6:	f000 faac 	bl	8002b02 <memmove>
 80025aa:	68a3      	ldr	r3, [r4, #8]
 80025ac:	2000      	movs	r0, #0
 80025ae:	1b9b      	subs	r3, r3, r6
 80025b0:	60a3      	str	r3, [r4, #8]
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	441e      	add	r6, r3
 80025b6:	6026      	str	r6, [r4, #0]
 80025b8:	e7dc      	b.n	8002574 <__ssputs_r+0x58>
 80025ba:	462a      	mov	r2, r5
 80025bc:	f000 fb60 	bl	8002c80 <_realloc_r>
 80025c0:	4606      	mov	r6, r0
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d1e2      	bne.n	800258c <__ssputs_r+0x70>
 80025c6:	6921      	ldr	r1, [r4, #16]
 80025c8:	4650      	mov	r0, sl
 80025ca:	f000 fab3 	bl	8002b34 <_free_r>
 80025ce:	e7c8      	b.n	8002562 <__ssputs_r+0x46>

080025d0 <_svfiprintf_r>:
 80025d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d4:	461d      	mov	r5, r3
 80025d6:	898b      	ldrh	r3, [r1, #12]
 80025d8:	b09d      	sub	sp, #116	; 0x74
 80025da:	061f      	lsls	r7, r3, #24
 80025dc:	4680      	mov	r8, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	4616      	mov	r6, r2
 80025e2:	d50f      	bpl.n	8002604 <_svfiprintf_r+0x34>
 80025e4:	690b      	ldr	r3, [r1, #16]
 80025e6:	b96b      	cbnz	r3, 8002604 <_svfiprintf_r+0x34>
 80025e8:	2140      	movs	r1, #64	; 0x40
 80025ea:	f000 faef 	bl	8002bcc <_malloc_r>
 80025ee:	6020      	str	r0, [r4, #0]
 80025f0:	6120      	str	r0, [r4, #16]
 80025f2:	b928      	cbnz	r0, 8002600 <_svfiprintf_r+0x30>
 80025f4:	230c      	movs	r3, #12
 80025f6:	f8c8 3000 	str.w	r3, [r8]
 80025fa:	f04f 30ff 	mov.w	r0, #4294967295
 80025fe:	e0c8      	b.n	8002792 <_svfiprintf_r+0x1c2>
 8002600:	2340      	movs	r3, #64	; 0x40
 8002602:	6163      	str	r3, [r4, #20]
 8002604:	2300      	movs	r3, #0
 8002606:	9309      	str	r3, [sp, #36]	; 0x24
 8002608:	2320      	movs	r3, #32
 800260a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800260e:	2330      	movs	r3, #48	; 0x30
 8002610:	f04f 0b01 	mov.w	fp, #1
 8002614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002618:	9503      	str	r5, [sp, #12]
 800261a:	4637      	mov	r7, r6
 800261c:	463d      	mov	r5, r7
 800261e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002622:	b10b      	cbz	r3, 8002628 <_svfiprintf_r+0x58>
 8002624:	2b25      	cmp	r3, #37	; 0x25
 8002626:	d13e      	bne.n	80026a6 <_svfiprintf_r+0xd6>
 8002628:	ebb7 0a06 	subs.w	sl, r7, r6
 800262c:	d00b      	beq.n	8002646 <_svfiprintf_r+0x76>
 800262e:	4653      	mov	r3, sl
 8002630:	4632      	mov	r2, r6
 8002632:	4621      	mov	r1, r4
 8002634:	4640      	mov	r0, r8
 8002636:	f7ff ff71 	bl	800251c <__ssputs_r>
 800263a:	3001      	adds	r0, #1
 800263c:	f000 80a4 	beq.w	8002788 <_svfiprintf_r+0x1b8>
 8002640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002642:	4453      	add	r3, sl
 8002644:	9309      	str	r3, [sp, #36]	; 0x24
 8002646:	783b      	ldrb	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 809d 	beq.w	8002788 <_svfiprintf_r+0x1b8>
 800264e:	2300      	movs	r3, #0
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002658:	9304      	str	r3, [sp, #16]
 800265a:	9307      	str	r3, [sp, #28]
 800265c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002660:	931a      	str	r3, [sp, #104]	; 0x68
 8002662:	462f      	mov	r7, r5
 8002664:	2205      	movs	r2, #5
 8002666:	f817 1b01 	ldrb.w	r1, [r7], #1
 800266a:	4850      	ldr	r0, [pc, #320]	; (80027ac <_svfiprintf_r+0x1dc>)
 800266c:	f000 fa30 	bl	8002ad0 <memchr>
 8002670:	9b04      	ldr	r3, [sp, #16]
 8002672:	b9d0      	cbnz	r0, 80026aa <_svfiprintf_r+0xda>
 8002674:	06d9      	lsls	r1, r3, #27
 8002676:	bf44      	itt	mi
 8002678:	2220      	movmi	r2, #32
 800267a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800267e:	071a      	lsls	r2, r3, #28
 8002680:	bf44      	itt	mi
 8002682:	222b      	movmi	r2, #43	; 0x2b
 8002684:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002688:	782a      	ldrb	r2, [r5, #0]
 800268a:	2a2a      	cmp	r2, #42	; 0x2a
 800268c:	d015      	beq.n	80026ba <_svfiprintf_r+0xea>
 800268e:	462f      	mov	r7, r5
 8002690:	2000      	movs	r0, #0
 8002692:	250a      	movs	r5, #10
 8002694:	9a07      	ldr	r2, [sp, #28]
 8002696:	4639      	mov	r1, r7
 8002698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800269c:	3b30      	subs	r3, #48	; 0x30
 800269e:	2b09      	cmp	r3, #9
 80026a0:	d94d      	bls.n	800273e <_svfiprintf_r+0x16e>
 80026a2:	b1b8      	cbz	r0, 80026d4 <_svfiprintf_r+0x104>
 80026a4:	e00f      	b.n	80026c6 <_svfiprintf_r+0xf6>
 80026a6:	462f      	mov	r7, r5
 80026a8:	e7b8      	b.n	800261c <_svfiprintf_r+0x4c>
 80026aa:	4a40      	ldr	r2, [pc, #256]	; (80027ac <_svfiprintf_r+0x1dc>)
 80026ac:	463d      	mov	r5, r7
 80026ae:	1a80      	subs	r0, r0, r2
 80026b0:	fa0b f000 	lsl.w	r0, fp, r0
 80026b4:	4318      	orrs	r0, r3
 80026b6:	9004      	str	r0, [sp, #16]
 80026b8:	e7d3      	b.n	8002662 <_svfiprintf_r+0x92>
 80026ba:	9a03      	ldr	r2, [sp, #12]
 80026bc:	1d11      	adds	r1, r2, #4
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	9103      	str	r1, [sp, #12]
 80026c2:	2a00      	cmp	r2, #0
 80026c4:	db01      	blt.n	80026ca <_svfiprintf_r+0xfa>
 80026c6:	9207      	str	r2, [sp, #28]
 80026c8:	e004      	b.n	80026d4 <_svfiprintf_r+0x104>
 80026ca:	4252      	negs	r2, r2
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	9207      	str	r2, [sp, #28]
 80026d2:	9304      	str	r3, [sp, #16]
 80026d4:	783b      	ldrb	r3, [r7, #0]
 80026d6:	2b2e      	cmp	r3, #46	; 0x2e
 80026d8:	d10c      	bne.n	80026f4 <_svfiprintf_r+0x124>
 80026da:	787b      	ldrb	r3, [r7, #1]
 80026dc:	2b2a      	cmp	r3, #42	; 0x2a
 80026de:	d133      	bne.n	8002748 <_svfiprintf_r+0x178>
 80026e0:	9b03      	ldr	r3, [sp, #12]
 80026e2:	3702      	adds	r7, #2
 80026e4:	1d1a      	adds	r2, r3, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	9203      	str	r2, [sp, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	bfb8      	it	lt
 80026ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80026f2:	9305      	str	r3, [sp, #20]
 80026f4:	4d2e      	ldr	r5, [pc, #184]	; (80027b0 <_svfiprintf_r+0x1e0>)
 80026f6:	2203      	movs	r2, #3
 80026f8:	7839      	ldrb	r1, [r7, #0]
 80026fa:	4628      	mov	r0, r5
 80026fc:	f000 f9e8 	bl	8002ad0 <memchr>
 8002700:	b138      	cbz	r0, 8002712 <_svfiprintf_r+0x142>
 8002702:	2340      	movs	r3, #64	; 0x40
 8002704:	1b40      	subs	r0, r0, r5
 8002706:	fa03 f000 	lsl.w	r0, r3, r0
 800270a:	9b04      	ldr	r3, [sp, #16]
 800270c:	3701      	adds	r7, #1
 800270e:	4303      	orrs	r3, r0
 8002710:	9304      	str	r3, [sp, #16]
 8002712:	7839      	ldrb	r1, [r7, #0]
 8002714:	2206      	movs	r2, #6
 8002716:	4827      	ldr	r0, [pc, #156]	; (80027b4 <_svfiprintf_r+0x1e4>)
 8002718:	1c7e      	adds	r6, r7, #1
 800271a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800271e:	f000 f9d7 	bl	8002ad0 <memchr>
 8002722:	2800      	cmp	r0, #0
 8002724:	d038      	beq.n	8002798 <_svfiprintf_r+0x1c8>
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <_svfiprintf_r+0x1e8>)
 8002728:	bb13      	cbnz	r3, 8002770 <_svfiprintf_r+0x1a0>
 800272a:	9b03      	ldr	r3, [sp, #12]
 800272c:	3307      	adds	r3, #7
 800272e:	f023 0307 	bic.w	r3, r3, #7
 8002732:	3308      	adds	r3, #8
 8002734:	9303      	str	r3, [sp, #12]
 8002736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002738:	444b      	add	r3, r9
 800273a:	9309      	str	r3, [sp, #36]	; 0x24
 800273c:	e76d      	b.n	800261a <_svfiprintf_r+0x4a>
 800273e:	fb05 3202 	mla	r2, r5, r2, r3
 8002742:	2001      	movs	r0, #1
 8002744:	460f      	mov	r7, r1
 8002746:	e7a6      	b.n	8002696 <_svfiprintf_r+0xc6>
 8002748:	2300      	movs	r3, #0
 800274a:	250a      	movs	r5, #10
 800274c:	4619      	mov	r1, r3
 800274e:	3701      	adds	r7, #1
 8002750:	9305      	str	r3, [sp, #20]
 8002752:	4638      	mov	r0, r7
 8002754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002758:	3a30      	subs	r2, #48	; 0x30
 800275a:	2a09      	cmp	r2, #9
 800275c:	d903      	bls.n	8002766 <_svfiprintf_r+0x196>
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0c8      	beq.n	80026f4 <_svfiprintf_r+0x124>
 8002762:	9105      	str	r1, [sp, #20]
 8002764:	e7c6      	b.n	80026f4 <_svfiprintf_r+0x124>
 8002766:	fb05 2101 	mla	r1, r5, r1, r2
 800276a:	2301      	movs	r3, #1
 800276c:	4607      	mov	r7, r0
 800276e:	e7f0      	b.n	8002752 <_svfiprintf_r+0x182>
 8002770:	ab03      	add	r3, sp, #12
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4622      	mov	r2, r4
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <_svfiprintf_r+0x1ec>)
 8002778:	a904      	add	r1, sp, #16
 800277a:	4640      	mov	r0, r8
 800277c:	f3af 8000 	nop.w
 8002780:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002784:	4681      	mov	r9, r0
 8002786:	d1d6      	bne.n	8002736 <_svfiprintf_r+0x166>
 8002788:	89a3      	ldrh	r3, [r4, #12]
 800278a:	065b      	lsls	r3, r3, #25
 800278c:	f53f af35 	bmi.w	80025fa <_svfiprintf_r+0x2a>
 8002790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002792:	b01d      	add	sp, #116	; 0x74
 8002794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002798:	ab03      	add	r3, sp, #12
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	4622      	mov	r2, r4
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <_svfiprintf_r+0x1ec>)
 80027a0:	a904      	add	r1, sp, #16
 80027a2:	4640      	mov	r0, r8
 80027a4:	f000 f882 	bl	80028ac <_printf_i>
 80027a8:	e7ea      	b.n	8002780 <_svfiprintf_r+0x1b0>
 80027aa:	bf00      	nop
 80027ac:	08002e88 	.word	0x08002e88
 80027b0:	08002e8e 	.word	0x08002e8e
 80027b4:	08002e92 	.word	0x08002e92
 80027b8:	00000000 	.word	0x00000000
 80027bc:	0800251d 	.word	0x0800251d

080027c0 <_printf_common>:
 80027c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c4:	4691      	mov	r9, r2
 80027c6:	461f      	mov	r7, r3
 80027c8:	688a      	ldr	r2, [r1, #8]
 80027ca:	690b      	ldr	r3, [r1, #16]
 80027cc:	4606      	mov	r6, r0
 80027ce:	4293      	cmp	r3, r2
 80027d0:	bfb8      	it	lt
 80027d2:	4613      	movlt	r3, r2
 80027d4:	f8c9 3000 	str.w	r3, [r9]
 80027d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027dc:	460c      	mov	r4, r1
 80027de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027e2:	b112      	cbz	r2, 80027ea <_printf_common+0x2a>
 80027e4:	3301      	adds	r3, #1
 80027e6:	f8c9 3000 	str.w	r3, [r9]
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	0699      	lsls	r1, r3, #26
 80027ee:	bf42      	ittt	mi
 80027f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80027f4:	3302      	addmi	r3, #2
 80027f6:	f8c9 3000 	strmi.w	r3, [r9]
 80027fa:	6825      	ldr	r5, [r4, #0]
 80027fc:	f015 0506 	ands.w	r5, r5, #6
 8002800:	d107      	bne.n	8002812 <_printf_common+0x52>
 8002802:	f104 0a19 	add.w	sl, r4, #25
 8002806:	68e3      	ldr	r3, [r4, #12]
 8002808:	f8d9 2000 	ldr.w	r2, [r9]
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	42ab      	cmp	r3, r5
 8002810:	dc29      	bgt.n	8002866 <_printf_common+0xa6>
 8002812:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002816:	6822      	ldr	r2, [r4, #0]
 8002818:	3300      	adds	r3, #0
 800281a:	bf18      	it	ne
 800281c:	2301      	movne	r3, #1
 800281e:	0692      	lsls	r2, r2, #26
 8002820:	d42e      	bmi.n	8002880 <_printf_common+0xc0>
 8002822:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002826:	4639      	mov	r1, r7
 8002828:	4630      	mov	r0, r6
 800282a:	47c0      	blx	r8
 800282c:	3001      	adds	r0, #1
 800282e:	d021      	beq.n	8002874 <_printf_common+0xb4>
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	68e5      	ldr	r5, [r4, #12]
 8002834:	f003 0306 	and.w	r3, r3, #6
 8002838:	2b04      	cmp	r3, #4
 800283a:	bf18      	it	ne
 800283c:	2500      	movne	r5, #0
 800283e:	f8d9 2000 	ldr.w	r2, [r9]
 8002842:	f04f 0900 	mov.w	r9, #0
 8002846:	bf08      	it	eq
 8002848:	1aad      	subeq	r5, r5, r2
 800284a:	68a3      	ldr	r3, [r4, #8]
 800284c:	6922      	ldr	r2, [r4, #16]
 800284e:	bf08      	it	eq
 8002850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002854:	4293      	cmp	r3, r2
 8002856:	bfc4      	itt	gt
 8002858:	1a9b      	subgt	r3, r3, r2
 800285a:	18ed      	addgt	r5, r5, r3
 800285c:	341a      	adds	r4, #26
 800285e:	454d      	cmp	r5, r9
 8002860:	d11a      	bne.n	8002898 <_printf_common+0xd8>
 8002862:	2000      	movs	r0, #0
 8002864:	e008      	b.n	8002878 <_printf_common+0xb8>
 8002866:	2301      	movs	r3, #1
 8002868:	4652      	mov	r2, sl
 800286a:	4639      	mov	r1, r7
 800286c:	4630      	mov	r0, r6
 800286e:	47c0      	blx	r8
 8002870:	3001      	adds	r0, #1
 8002872:	d103      	bne.n	800287c <_printf_common+0xbc>
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800287c:	3501      	adds	r5, #1
 800287e:	e7c2      	b.n	8002806 <_printf_common+0x46>
 8002880:	2030      	movs	r0, #48	; 0x30
 8002882:	18e1      	adds	r1, r4, r3
 8002884:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800288e:	4422      	add	r2, r4
 8002890:	3302      	adds	r3, #2
 8002892:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002896:	e7c4      	b.n	8002822 <_printf_common+0x62>
 8002898:	2301      	movs	r3, #1
 800289a:	4622      	mov	r2, r4
 800289c:	4639      	mov	r1, r7
 800289e:	4630      	mov	r0, r6
 80028a0:	47c0      	blx	r8
 80028a2:	3001      	adds	r0, #1
 80028a4:	d0e6      	beq.n	8002874 <_printf_common+0xb4>
 80028a6:	f109 0901 	add.w	r9, r9, #1
 80028aa:	e7d8      	b.n	800285e <_printf_common+0x9e>

080028ac <_printf_i>:
 80028ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80028b4:	460c      	mov	r4, r1
 80028b6:	7e09      	ldrb	r1, [r1, #24]
 80028b8:	b085      	sub	sp, #20
 80028ba:	296e      	cmp	r1, #110	; 0x6e
 80028bc:	4617      	mov	r7, r2
 80028be:	4606      	mov	r6, r0
 80028c0:	4698      	mov	r8, r3
 80028c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80028c4:	f000 80b3 	beq.w	8002a2e <_printf_i+0x182>
 80028c8:	d822      	bhi.n	8002910 <_printf_i+0x64>
 80028ca:	2963      	cmp	r1, #99	; 0x63
 80028cc:	d036      	beq.n	800293c <_printf_i+0x90>
 80028ce:	d80a      	bhi.n	80028e6 <_printf_i+0x3a>
 80028d0:	2900      	cmp	r1, #0
 80028d2:	f000 80b9 	beq.w	8002a48 <_printf_i+0x19c>
 80028d6:	2958      	cmp	r1, #88	; 0x58
 80028d8:	f000 8083 	beq.w	80029e2 <_printf_i+0x136>
 80028dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80028e4:	e032      	b.n	800294c <_printf_i+0xa0>
 80028e6:	2964      	cmp	r1, #100	; 0x64
 80028e8:	d001      	beq.n	80028ee <_printf_i+0x42>
 80028ea:	2969      	cmp	r1, #105	; 0x69
 80028ec:	d1f6      	bne.n	80028dc <_printf_i+0x30>
 80028ee:	6820      	ldr	r0, [r4, #0]
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	0605      	lsls	r5, r0, #24
 80028f4:	f103 0104 	add.w	r1, r3, #4
 80028f8:	d52a      	bpl.n	8002950 <_printf_i+0xa4>
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6011      	str	r1, [r2, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da03      	bge.n	800290a <_printf_i+0x5e>
 8002902:	222d      	movs	r2, #45	; 0x2d
 8002904:	425b      	negs	r3, r3
 8002906:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800290a:	486f      	ldr	r0, [pc, #444]	; (8002ac8 <_printf_i+0x21c>)
 800290c:	220a      	movs	r2, #10
 800290e:	e039      	b.n	8002984 <_printf_i+0xd8>
 8002910:	2973      	cmp	r1, #115	; 0x73
 8002912:	f000 809d 	beq.w	8002a50 <_printf_i+0x1a4>
 8002916:	d808      	bhi.n	800292a <_printf_i+0x7e>
 8002918:	296f      	cmp	r1, #111	; 0x6f
 800291a:	d020      	beq.n	800295e <_printf_i+0xb2>
 800291c:	2970      	cmp	r1, #112	; 0x70
 800291e:	d1dd      	bne.n	80028dc <_printf_i+0x30>
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	f043 0320 	orr.w	r3, r3, #32
 8002926:	6023      	str	r3, [r4, #0]
 8002928:	e003      	b.n	8002932 <_printf_i+0x86>
 800292a:	2975      	cmp	r1, #117	; 0x75
 800292c:	d017      	beq.n	800295e <_printf_i+0xb2>
 800292e:	2978      	cmp	r1, #120	; 0x78
 8002930:	d1d4      	bne.n	80028dc <_printf_i+0x30>
 8002932:	2378      	movs	r3, #120	; 0x78
 8002934:	4865      	ldr	r0, [pc, #404]	; (8002acc <_printf_i+0x220>)
 8002936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800293a:	e055      	b.n	80029e8 <_printf_i+0x13c>
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002942:	1d19      	adds	r1, r3, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6011      	str	r1, [r2, #0]
 8002948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800294c:	2301      	movs	r3, #1
 800294e:	e08c      	b.n	8002a6a <_printf_i+0x1be>
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002956:	6011      	str	r1, [r2, #0]
 8002958:	bf18      	it	ne
 800295a:	b21b      	sxthne	r3, r3
 800295c:	e7cf      	b.n	80028fe <_printf_i+0x52>
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	6825      	ldr	r5, [r4, #0]
 8002962:	1d18      	adds	r0, r3, #4
 8002964:	6010      	str	r0, [r2, #0]
 8002966:	0628      	lsls	r0, r5, #24
 8002968:	d501      	bpl.n	800296e <_printf_i+0xc2>
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	e002      	b.n	8002974 <_printf_i+0xc8>
 800296e:	0668      	lsls	r0, r5, #25
 8002970:	d5fb      	bpl.n	800296a <_printf_i+0xbe>
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	296f      	cmp	r1, #111	; 0x6f
 8002976:	bf14      	ite	ne
 8002978:	220a      	movne	r2, #10
 800297a:	2208      	moveq	r2, #8
 800297c:	4852      	ldr	r0, [pc, #328]	; (8002ac8 <_printf_i+0x21c>)
 800297e:	2100      	movs	r1, #0
 8002980:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002984:	6865      	ldr	r5, [r4, #4]
 8002986:	2d00      	cmp	r5, #0
 8002988:	60a5      	str	r5, [r4, #8]
 800298a:	f2c0 8095 	blt.w	8002ab8 <_printf_i+0x20c>
 800298e:	6821      	ldr	r1, [r4, #0]
 8002990:	f021 0104 	bic.w	r1, r1, #4
 8002994:	6021      	str	r1, [r4, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d13d      	bne.n	8002a16 <_printf_i+0x16a>
 800299a:	2d00      	cmp	r5, #0
 800299c:	f040 808e 	bne.w	8002abc <_printf_i+0x210>
 80029a0:	4665      	mov	r5, ip
 80029a2:	2a08      	cmp	r2, #8
 80029a4:	d10b      	bne.n	80029be <_printf_i+0x112>
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	07db      	lsls	r3, r3, #31
 80029aa:	d508      	bpl.n	80029be <_printf_i+0x112>
 80029ac:	6923      	ldr	r3, [r4, #16]
 80029ae:	6862      	ldr	r2, [r4, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	bfde      	ittt	le
 80029b4:	2330      	movle	r3, #48	; 0x30
 80029b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029be:	ebac 0305 	sub.w	r3, ip, r5
 80029c2:	6123      	str	r3, [r4, #16]
 80029c4:	f8cd 8000 	str.w	r8, [sp]
 80029c8:	463b      	mov	r3, r7
 80029ca:	aa03      	add	r2, sp, #12
 80029cc:	4621      	mov	r1, r4
 80029ce:	4630      	mov	r0, r6
 80029d0:	f7ff fef6 	bl	80027c0 <_printf_common>
 80029d4:	3001      	adds	r0, #1
 80029d6:	d14d      	bne.n	8002a74 <_printf_i+0x1c8>
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	b005      	add	sp, #20
 80029de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029e2:	4839      	ldr	r0, [pc, #228]	; (8002ac8 <_printf_i+0x21c>)
 80029e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80029e8:	6813      	ldr	r3, [r2, #0]
 80029ea:	6821      	ldr	r1, [r4, #0]
 80029ec:	1d1d      	adds	r5, r3, #4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6015      	str	r5, [r2, #0]
 80029f2:	060a      	lsls	r2, r1, #24
 80029f4:	d50b      	bpl.n	8002a0e <_printf_i+0x162>
 80029f6:	07ca      	lsls	r2, r1, #31
 80029f8:	bf44      	itt	mi
 80029fa:	f041 0120 	orrmi.w	r1, r1, #32
 80029fe:	6021      	strmi	r1, [r4, #0]
 8002a00:	b91b      	cbnz	r3, 8002a0a <_printf_i+0x15e>
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	f022 0220 	bic.w	r2, r2, #32
 8002a08:	6022      	str	r2, [r4, #0]
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	e7b7      	b.n	800297e <_printf_i+0xd2>
 8002a0e:	064d      	lsls	r5, r1, #25
 8002a10:	bf48      	it	mi
 8002a12:	b29b      	uxthmi	r3, r3
 8002a14:	e7ef      	b.n	80029f6 <_printf_i+0x14a>
 8002a16:	4665      	mov	r5, ip
 8002a18:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a1c:	fb02 3311 	mls	r3, r2, r1, r3
 8002a20:	5cc3      	ldrb	r3, [r0, r3]
 8002a22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a26:	460b      	mov	r3, r1
 8002a28:	2900      	cmp	r1, #0
 8002a2a:	d1f5      	bne.n	8002a18 <_printf_i+0x16c>
 8002a2c:	e7b9      	b.n	80029a2 <_printf_i+0xf6>
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	6825      	ldr	r5, [r4, #0]
 8002a32:	1d18      	adds	r0, r3, #4
 8002a34:	6961      	ldr	r1, [r4, #20]
 8002a36:	6010      	str	r0, [r2, #0]
 8002a38:	0628      	lsls	r0, r5, #24
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	d501      	bpl.n	8002a42 <_printf_i+0x196>
 8002a3e:	6019      	str	r1, [r3, #0]
 8002a40:	e002      	b.n	8002a48 <_printf_i+0x19c>
 8002a42:	066a      	lsls	r2, r5, #25
 8002a44:	d5fb      	bpl.n	8002a3e <_printf_i+0x192>
 8002a46:	8019      	strh	r1, [r3, #0]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	4665      	mov	r5, ip
 8002a4c:	6123      	str	r3, [r4, #16]
 8002a4e:	e7b9      	b.n	80029c4 <_printf_i+0x118>
 8002a50:	6813      	ldr	r3, [r2, #0]
 8002a52:	1d19      	adds	r1, r3, #4
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	681d      	ldr	r5, [r3, #0]
 8002a58:	6862      	ldr	r2, [r4, #4]
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	f000 f837 	bl	8002ad0 <memchr>
 8002a62:	b108      	cbz	r0, 8002a68 <_printf_i+0x1bc>
 8002a64:	1b40      	subs	r0, r0, r5
 8002a66:	6060      	str	r0, [r4, #4]
 8002a68:	6863      	ldr	r3, [r4, #4]
 8002a6a:	6123      	str	r3, [r4, #16]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a72:	e7a7      	b.n	80029c4 <_printf_i+0x118>
 8002a74:	6923      	ldr	r3, [r4, #16]
 8002a76:	462a      	mov	r2, r5
 8002a78:	4639      	mov	r1, r7
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	47c0      	blx	r8
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d0aa      	beq.n	80029d8 <_printf_i+0x12c>
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	079b      	lsls	r3, r3, #30
 8002a86:	d413      	bmi.n	8002ab0 <_printf_i+0x204>
 8002a88:	68e0      	ldr	r0, [r4, #12]
 8002a8a:	9b03      	ldr	r3, [sp, #12]
 8002a8c:	4298      	cmp	r0, r3
 8002a8e:	bfb8      	it	lt
 8002a90:	4618      	movlt	r0, r3
 8002a92:	e7a3      	b.n	80029dc <_printf_i+0x130>
 8002a94:	2301      	movs	r3, #1
 8002a96:	464a      	mov	r2, r9
 8002a98:	4639      	mov	r1, r7
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	47c0      	blx	r8
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	d09a      	beq.n	80029d8 <_printf_i+0x12c>
 8002aa2:	3501      	adds	r5, #1
 8002aa4:	68e3      	ldr	r3, [r4, #12]
 8002aa6:	9a03      	ldr	r2, [sp, #12]
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	42ab      	cmp	r3, r5
 8002aac:	dcf2      	bgt.n	8002a94 <_printf_i+0x1e8>
 8002aae:	e7eb      	b.n	8002a88 <_printf_i+0x1dc>
 8002ab0:	2500      	movs	r5, #0
 8002ab2:	f104 0919 	add.w	r9, r4, #25
 8002ab6:	e7f5      	b.n	8002aa4 <_printf_i+0x1f8>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1ac      	bne.n	8002a16 <_printf_i+0x16a>
 8002abc:	7803      	ldrb	r3, [r0, #0]
 8002abe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ac2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ac6:	e76c      	b.n	80029a2 <_printf_i+0xf6>
 8002ac8:	08002e99 	.word	0x08002e99
 8002acc:	08002eaa 	.word	0x08002eaa

08002ad0 <memchr>:
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	b2c9      	uxtb	r1, r1
 8002ad4:	4402      	add	r2, r0
 8002ad6:	4290      	cmp	r0, r2
 8002ad8:	4603      	mov	r3, r0
 8002ada:	d101      	bne.n	8002ae0 <memchr+0x10>
 8002adc:	2300      	movs	r3, #0
 8002ade:	e003      	b.n	8002ae8 <memchr+0x18>
 8002ae0:	781c      	ldrb	r4, [r3, #0]
 8002ae2:	3001      	adds	r0, #1
 8002ae4:	428c      	cmp	r4, r1
 8002ae6:	d1f6      	bne.n	8002ad6 <memchr+0x6>
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd10      	pop	{r4, pc}

08002aec <memcpy>:
 8002aec:	b510      	push	{r4, lr}
 8002aee:	1e43      	subs	r3, r0, #1
 8002af0:	440a      	add	r2, r1
 8002af2:	4291      	cmp	r1, r2
 8002af4:	d100      	bne.n	8002af8 <memcpy+0xc>
 8002af6:	bd10      	pop	{r4, pc}
 8002af8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b00:	e7f7      	b.n	8002af2 <memcpy+0x6>

08002b02 <memmove>:
 8002b02:	4288      	cmp	r0, r1
 8002b04:	b510      	push	{r4, lr}
 8002b06:	eb01 0302 	add.w	r3, r1, r2
 8002b0a:	d807      	bhi.n	8002b1c <memmove+0x1a>
 8002b0c:	1e42      	subs	r2, r0, #1
 8002b0e:	4299      	cmp	r1, r3
 8002b10:	d00a      	beq.n	8002b28 <memmove+0x26>
 8002b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002b1a:	e7f8      	b.n	8002b0e <memmove+0xc>
 8002b1c:	4283      	cmp	r3, r0
 8002b1e:	d9f5      	bls.n	8002b0c <memmove+0xa>
 8002b20:	1881      	adds	r1, r0, r2
 8002b22:	1ad2      	subs	r2, r2, r3
 8002b24:	42d3      	cmn	r3, r2
 8002b26:	d100      	bne.n	8002b2a <memmove+0x28>
 8002b28:	bd10      	pop	{r4, pc}
 8002b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002b32:	e7f7      	b.n	8002b24 <memmove+0x22>

08002b34 <_free_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4605      	mov	r5, r0
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d043      	beq.n	8002bc4 <_free_r+0x90>
 8002b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b40:	1f0c      	subs	r4, r1, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bfb8      	it	lt
 8002b46:	18e4      	addlt	r4, r4, r3
 8002b48:	f000 f8d0 	bl	8002cec <__malloc_lock>
 8002b4c:	4a1e      	ldr	r2, [pc, #120]	; (8002bc8 <_free_r+0x94>)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	4610      	mov	r0, r2
 8002b52:	b933      	cbnz	r3, 8002b62 <_free_r+0x2e>
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	6014      	str	r4, [r2, #0]
 8002b58:	4628      	mov	r0, r5
 8002b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b5e:	f000 b8c6 	b.w	8002cee <__malloc_unlock>
 8002b62:	42a3      	cmp	r3, r4
 8002b64:	d90b      	bls.n	8002b7e <_free_r+0x4a>
 8002b66:	6821      	ldr	r1, [r4, #0]
 8002b68:	1862      	adds	r2, r4, r1
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	bf01      	itttt	eq
 8002b6e:	681a      	ldreq	r2, [r3, #0]
 8002b70:	685b      	ldreq	r3, [r3, #4]
 8002b72:	1852      	addeq	r2, r2, r1
 8002b74:	6022      	streq	r2, [r4, #0]
 8002b76:	6063      	str	r3, [r4, #4]
 8002b78:	6004      	str	r4, [r0, #0]
 8002b7a:	e7ed      	b.n	8002b58 <_free_r+0x24>
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	b10a      	cbz	r2, 8002b86 <_free_r+0x52>
 8002b82:	42a2      	cmp	r2, r4
 8002b84:	d9fa      	bls.n	8002b7c <_free_r+0x48>
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	1858      	adds	r0, r3, r1
 8002b8a:	42a0      	cmp	r0, r4
 8002b8c:	d10b      	bne.n	8002ba6 <_free_r+0x72>
 8002b8e:	6820      	ldr	r0, [r4, #0]
 8002b90:	4401      	add	r1, r0
 8002b92:	1858      	adds	r0, r3, r1
 8002b94:	4282      	cmp	r2, r0
 8002b96:	6019      	str	r1, [r3, #0]
 8002b98:	d1de      	bne.n	8002b58 <_free_r+0x24>
 8002b9a:	6810      	ldr	r0, [r2, #0]
 8002b9c:	6852      	ldr	r2, [r2, #4]
 8002b9e:	4401      	add	r1, r0
 8002ba0:	6019      	str	r1, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	e7d8      	b.n	8002b58 <_free_r+0x24>
 8002ba6:	d902      	bls.n	8002bae <_free_r+0x7a>
 8002ba8:	230c      	movs	r3, #12
 8002baa:	602b      	str	r3, [r5, #0]
 8002bac:	e7d4      	b.n	8002b58 <_free_r+0x24>
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	1821      	adds	r1, r4, r0
 8002bb2:	428a      	cmp	r2, r1
 8002bb4:	bf01      	itttt	eq
 8002bb6:	6811      	ldreq	r1, [r2, #0]
 8002bb8:	6852      	ldreq	r2, [r2, #4]
 8002bba:	1809      	addeq	r1, r1, r0
 8002bbc:	6021      	streq	r1, [r4, #0]
 8002bbe:	6062      	str	r2, [r4, #4]
 8002bc0:	605c      	str	r4, [r3, #4]
 8002bc2:	e7c9      	b.n	8002b58 <_free_r+0x24>
 8002bc4:	bd38      	pop	{r3, r4, r5, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000098 	.word	0x20000098

08002bcc <_malloc_r>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	1ccd      	adds	r5, r1, #3
 8002bd0:	f025 0503 	bic.w	r5, r5, #3
 8002bd4:	3508      	adds	r5, #8
 8002bd6:	2d0c      	cmp	r5, #12
 8002bd8:	bf38      	it	cc
 8002bda:	250c      	movcc	r5, #12
 8002bdc:	2d00      	cmp	r5, #0
 8002bde:	4606      	mov	r6, r0
 8002be0:	db01      	blt.n	8002be6 <_malloc_r+0x1a>
 8002be2:	42a9      	cmp	r1, r5
 8002be4:	d903      	bls.n	8002bee <_malloc_r+0x22>
 8002be6:	230c      	movs	r3, #12
 8002be8:	6033      	str	r3, [r6, #0]
 8002bea:	2000      	movs	r0, #0
 8002bec:	bd70      	pop	{r4, r5, r6, pc}
 8002bee:	f000 f87d 	bl	8002cec <__malloc_lock>
 8002bf2:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <_malloc_r+0xac>)
 8002bf4:	6814      	ldr	r4, [r2, #0]
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	b991      	cbnz	r1, 8002c20 <_malloc_r+0x54>
 8002bfa:	4c20      	ldr	r4, [pc, #128]	; (8002c7c <_malloc_r+0xb0>)
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	b91b      	cbnz	r3, 8002c08 <_malloc_r+0x3c>
 8002c00:	4630      	mov	r0, r6
 8002c02:	f000 f863 	bl	8002ccc <_sbrk_r>
 8002c06:	6020      	str	r0, [r4, #0]
 8002c08:	4629      	mov	r1, r5
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f000 f85e 	bl	8002ccc <_sbrk_r>
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	d124      	bne.n	8002c5e <_malloc_r+0x92>
 8002c14:	230c      	movs	r3, #12
 8002c16:	4630      	mov	r0, r6
 8002c18:	6033      	str	r3, [r6, #0]
 8002c1a:	f000 f868 	bl	8002cee <__malloc_unlock>
 8002c1e:	e7e4      	b.n	8002bea <_malloc_r+0x1e>
 8002c20:	680b      	ldr	r3, [r1, #0]
 8002c22:	1b5b      	subs	r3, r3, r5
 8002c24:	d418      	bmi.n	8002c58 <_malloc_r+0x8c>
 8002c26:	2b0b      	cmp	r3, #11
 8002c28:	d90f      	bls.n	8002c4a <_malloc_r+0x7e>
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	18cc      	adds	r4, r1, r3
 8002c2e:	50cd      	str	r5, [r1, r3]
 8002c30:	4630      	mov	r0, r6
 8002c32:	f000 f85c 	bl	8002cee <__malloc_unlock>
 8002c36:	f104 000b 	add.w	r0, r4, #11
 8002c3a:	1d23      	adds	r3, r4, #4
 8002c3c:	f020 0007 	bic.w	r0, r0, #7
 8002c40:	1ac3      	subs	r3, r0, r3
 8002c42:	d0d3      	beq.n	8002bec <_malloc_r+0x20>
 8002c44:	425a      	negs	r2, r3
 8002c46:	50e2      	str	r2, [r4, r3]
 8002c48:	e7d0      	b.n	8002bec <_malloc_r+0x20>
 8002c4a:	684b      	ldr	r3, [r1, #4]
 8002c4c:	428c      	cmp	r4, r1
 8002c4e:	bf16      	itet	ne
 8002c50:	6063      	strne	r3, [r4, #4]
 8002c52:	6013      	streq	r3, [r2, #0]
 8002c54:	460c      	movne	r4, r1
 8002c56:	e7eb      	b.n	8002c30 <_malloc_r+0x64>
 8002c58:	460c      	mov	r4, r1
 8002c5a:	6849      	ldr	r1, [r1, #4]
 8002c5c:	e7cc      	b.n	8002bf8 <_malloc_r+0x2c>
 8002c5e:	1cc4      	adds	r4, r0, #3
 8002c60:	f024 0403 	bic.w	r4, r4, #3
 8002c64:	42a0      	cmp	r0, r4
 8002c66:	d005      	beq.n	8002c74 <_malloc_r+0xa8>
 8002c68:	1a21      	subs	r1, r4, r0
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	f000 f82e 	bl	8002ccc <_sbrk_r>
 8002c70:	3001      	adds	r0, #1
 8002c72:	d0cf      	beq.n	8002c14 <_malloc_r+0x48>
 8002c74:	6025      	str	r5, [r4, #0]
 8002c76:	e7db      	b.n	8002c30 <_malloc_r+0x64>
 8002c78:	20000098 	.word	0x20000098
 8002c7c:	2000009c 	.word	0x2000009c

08002c80 <_realloc_r>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	4607      	mov	r7, r0
 8002c84:	4614      	mov	r4, r2
 8002c86:	460e      	mov	r6, r1
 8002c88:	b921      	cbnz	r1, 8002c94 <_realloc_r+0x14>
 8002c8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c8e:	4611      	mov	r1, r2
 8002c90:	f7ff bf9c 	b.w	8002bcc <_malloc_r>
 8002c94:	b922      	cbnz	r2, 8002ca0 <_realloc_r+0x20>
 8002c96:	f7ff ff4d 	bl	8002b34 <_free_r>
 8002c9a:	4625      	mov	r5, r4
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ca0:	f000 f826 	bl	8002cf0 <_malloc_usable_size_r>
 8002ca4:	42a0      	cmp	r0, r4
 8002ca6:	d20f      	bcs.n	8002cc8 <_realloc_r+0x48>
 8002ca8:	4621      	mov	r1, r4
 8002caa:	4638      	mov	r0, r7
 8002cac:	f7ff ff8e 	bl	8002bcc <_malloc_r>
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d0f2      	beq.n	8002c9c <_realloc_r+0x1c>
 8002cb6:	4631      	mov	r1, r6
 8002cb8:	4622      	mov	r2, r4
 8002cba:	f7ff ff17 	bl	8002aec <memcpy>
 8002cbe:	4631      	mov	r1, r6
 8002cc0:	4638      	mov	r0, r7
 8002cc2:	f7ff ff37 	bl	8002b34 <_free_r>
 8002cc6:	e7e9      	b.n	8002c9c <_realloc_r+0x1c>
 8002cc8:	4635      	mov	r5, r6
 8002cca:	e7e7      	b.n	8002c9c <_realloc_r+0x1c>

08002ccc <_sbrk_r>:
 8002ccc:	b538      	push	{r3, r4, r5, lr}
 8002cce:	2300      	movs	r3, #0
 8002cd0:	4c05      	ldr	r4, [pc, #20]	; (8002ce8 <_sbrk_r+0x1c>)
 8002cd2:	4605      	mov	r5, r0
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	6023      	str	r3, [r4, #0]
 8002cd8:	f7fd fd52 	bl	8000780 <_sbrk>
 8002cdc:	1c43      	adds	r3, r0, #1
 8002cde:	d102      	bne.n	8002ce6 <_sbrk_r+0x1a>
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	b103      	cbz	r3, 8002ce6 <_sbrk_r+0x1a>
 8002ce4:	602b      	str	r3, [r5, #0]
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	200000ec 	.word	0x200000ec

08002cec <__malloc_lock>:
 8002cec:	4770      	bx	lr

08002cee <__malloc_unlock>:
 8002cee:	4770      	bx	lr

08002cf0 <_malloc_usable_size_r>:
 8002cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cf4:	1f18      	subs	r0, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bfbc      	itt	lt
 8002cfa:	580b      	ldrlt	r3, [r1, r0]
 8002cfc:	18c0      	addlt	r0, r0, r3
 8002cfe:	4770      	bx	lr

08002d00 <_init>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	bf00      	nop
 8002d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d06:	bc08      	pop	{r3}
 8002d08:	469e      	mov	lr, r3
 8002d0a:	4770      	bx	lr

08002d0c <_fini>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	bf00      	nop
 8002d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d12:	bc08      	pop	{r3}
 8002d14:	469e      	mov	lr, r3
 8002d16:	4770      	bx	lr
