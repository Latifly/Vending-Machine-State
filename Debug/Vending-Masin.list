
Vending-Masin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000228c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08002398  08002398  00012398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002504  08002504  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002504  08002504  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002504  08002504  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800250c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000010  0800251c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800251c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c59  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000162d  00000000  00000000  00027c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  000292c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  00029c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000135cf  00000000  00000000  0002a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d05  00000000  00000000  0003dac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006bd11  00000000  00000000  000447cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b04dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002644  00000000  00000000  000b0558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002380 	.word	0x08002380

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002380 	.word	0x08002380

0800014c <LCD_Write4bit>:
#include "LCD.h"
#include "stm32f1xx_hal.h"
#include "main.h"


void LCD_Write4bit(uint8_t data){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((data>>0)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f003 0301 	and.w	r3, r3, #1
 800015c:	b2db      	uxtb	r3, r3
 800015e:	461a      	mov	r2, r3
 8000160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000164:	4815      	ldr	r0, [pc, #84]	; (80001bc <LCD_Write4bit+0x70>)
 8000166:	f001 f93c 	bl	80013e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((data>>1)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	085b      	lsrs	r3, r3, #1
 800016e:	b2db      	uxtb	r3, r3
 8000170:	f003 0301 	and.w	r3, r3, #1
 8000174:	b2db      	uxtb	r3, r3
 8000176:	461a      	mov	r2, r3
 8000178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017c:	4810      	ldr	r0, [pc, #64]	; (80001c0 <LCD_Write4bit+0x74>)
 800017e:	f001 f930 	bl	80013e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((data>>2)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	089b      	lsrs	r3, r3, #2
 8000186:	b2db      	uxtb	r3, r3
 8000188:	f003 0301 	and.w	r3, r3, #1
 800018c:	b2db      	uxtb	r3, r3
 800018e:	461a      	mov	r2, r3
 8000190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000194:	480a      	ldr	r0, [pc, #40]	; (80001c0 <LCD_Write4bit+0x74>)
 8000196:	f001 f924 	bl	80013e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((data>>3)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	08db      	lsrs	r3, r3, #3
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	f003 0301 	and.w	r3, r3, #1
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	461a      	mov	r2, r3
 80001a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <LCD_Write4bit+0x74>)
 80001ae:	f001 f918 	bl	80013e2 <HAL_GPIO_WritePin>
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010c00 	.word	0x40010c00
 80001c0:	40010800 	.word	0x40010800

080001c4 <LCD_Send>:

void LCD_Send(_Bool mode, uint8_t data){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	460a      	mov	r2, r1
 80001ce:	71fb      	strb	r3, [r7, #7]
 80001d0:	4613      	mov	r3, r2
 80001d2:	71bb      	strb	r3, [r7, #6]
	LCD_RW(0);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001da:	4832      	ldr	r0, [pc, #200]	; (80002a4 <LCD_Send+0xe0>)
 80001dc:	f001 f901 	bl	80013e2 <HAL_GPIO_WritePin>
	if (mode){
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d006      	beq.n	80001f4 <LCD_Send+0x30>
		LCD_RS(1);
 80001e6:	2201      	movs	r2, #1
 80001e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ec:	482d      	ldr	r0, [pc, #180]	; (80002a4 <LCD_Send+0xe0>)
 80001ee:	f001 f8f8 	bl	80013e2 <HAL_GPIO_WritePin>
 80001f2:	e005      	b.n	8000200 <LCD_Send+0x3c>
	}
	else {LCD_RS(0);}
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001fa:	482a      	ldr	r0, [pc, #168]	; (80002a4 <LCD_Send+0xe0>)
 80001fc:	f001 f8f1 	bl	80013e2 <HAL_GPIO_WritePin>
	LCD_Write4bit(data>>4);
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	091b      	lsrs	r3, r3, #4
 8000204:	b2db      	uxtb	r3, r3
 8000206:	4618      	mov	r0, r3
 8000208:	f7ff ffa0 	bl	800014c <LCD_Write4bit>
	LCD_EN();
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4824      	ldr	r0, [pc, #144]	; (80002a4 <LCD_Send+0xe0>)
 8000214:	f001 f8e5 	bl	80013e2 <HAL_GPIO_WritePin>
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	e002      	b.n	8000224 <LCD_Send+0x60>
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	3301      	adds	r3, #1
 8000222:	617b      	str	r3, [r7, #20]
 8000224:	697b      	ldr	r3, [r7, #20]
 8000226:	f240 52db 	movw	r2, #1499	; 0x5db
 800022a:	4293      	cmp	r3, r2
 800022c:	ddf7      	ble.n	800021e <LCD_Send+0x5a>
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000234:	481b      	ldr	r0, [pc, #108]	; (80002a4 <LCD_Send+0xe0>)
 8000236:	f001 f8d4 	bl	80013e2 <HAL_GPIO_WritePin>
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	e002      	b.n	8000246 <LCD_Send+0x82>
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	3301      	adds	r3, #1
 8000244:	613b      	str	r3, [r7, #16]
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	f240 52db 	movw	r2, #1499	; 0x5db
 800024c:	4293      	cmp	r3, r2
 800024e:	ddf7      	ble.n	8000240 <LCD_Send+0x7c>
	LCD_Write4bit(data);
 8000250:	79bb      	ldrb	r3, [r7, #6]
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ff7a 	bl	800014c <LCD_Write4bit>
	LCD_EN();
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800025e:	4811      	ldr	r0, [pc, #68]	; (80002a4 <LCD_Send+0xe0>)
 8000260:	f001 f8bf 	bl	80013e2 <HAL_GPIO_WritePin>
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	e002      	b.n	8000270 <LCD_Send+0xac>
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3301      	adds	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	f240 52db 	movw	r2, #1499	; 0x5db
 8000276:	4293      	cmp	r3, r2
 8000278:	ddf7      	ble.n	800026a <LCD_Send+0xa6>
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000280:	4808      	ldr	r0, [pc, #32]	; (80002a4 <LCD_Send+0xe0>)
 8000282:	f001 f8ae 	bl	80013e2 <HAL_GPIO_WritePin>
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	e002      	b.n	8000292 <LCD_Send+0xce>
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	3301      	adds	r3, #1
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	f240 52db 	movw	r2, #1499	; 0x5db
 8000298:	4293      	cmp	r3, r2
 800029a:	ddf7      	ble.n	800028c <LCD_Send+0xc8>
}
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40010c00 	.word	0x40010c00

080002a8 <LCD_Print>:

void LCD_Print(char *pData){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	while(*pData){
 80002b0:	e007      	b.n	80002c2 <LCD_Print+0x1a>
		LCD_Data(*pData++);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	1c5a      	adds	r2, r3, #1
 80002b6:	607a      	str	r2, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4619      	mov	r1, r3
 80002bc:	2001      	movs	r0, #1
 80002be:	f7ff ff81 	bl	80001c4 <LCD_Send>
	while(*pData){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1f3      	bne.n	80002b2 <LCD_Print+0xa>
//		pData++;
	}
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t x, uint8_t y){
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	4603      	mov	r3, r0
 80002da:	460a      	mov	r2, r1
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	4613      	mov	r3, r2
 80002e0:	71bb      	strb	r3, [r7, #6]
	if(y==0) {LCD_Command(0x80 + x);}
 80002e2:	79bb      	ldrb	r3, [r7, #6]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d106      	bne.n	80002f6 <LCD_SetCursor+0x24>
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	3b80      	subs	r3, #128	; 0x80
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	4619      	mov	r1, r3
 80002f0:	2000      	movs	r0, #0
 80002f2:	f7ff ff67 	bl	80001c4 <LCD_Send>
	if(y==1) {LCD_Command(0xC0 + x);}
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d106      	bne.n	800030a <LCD_SetCursor+0x38>
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	3b40      	subs	r3, #64	; 0x40
 8000300:	b2db      	uxtb	r3, r3
 8000302:	4619      	mov	r1, r3
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ff5d 	bl	80001c4 <LCD_Send>
	if(y==2) {LCD_Command(0x94 + x);}
 800030a:	79bb      	ldrb	r3, [r7, #6]
 800030c:	2b02      	cmp	r3, #2
 800030e:	d106      	bne.n	800031e <LCD_SetCursor+0x4c>
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	3b6c      	subs	r3, #108	; 0x6c
 8000314:	b2db      	uxtb	r3, r3
 8000316:	4619      	mov	r1, r3
 8000318:	2000      	movs	r0, #0
 800031a:	f7ff ff53 	bl	80001c4 <LCD_Send>
	if(y==3) {LCD_Command(0xD4 + x);}
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d106      	bne.n	8000332 <LCD_SetCursor+0x60>
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	3b2c      	subs	r3, #44	; 0x2c
 8000328:	b2db      	uxtb	r3, r3
 800032a:	4619      	mov	r1, r3
 800032c:	2000      	movs	r0, #0
 800032e:	f7ff ff49 	bl	80001c4 <LCD_Send>

}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <LCD_Init>:

void LCD_Init(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	LCD_RW(0);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <LCD_Init+0x40>)
 8000348:	f001 f84b 	bl	80013e2 <HAL_GPIO_WritePin>
	LCD_Command(0x33);
 800034c:	2133      	movs	r1, #51	; 0x33
 800034e:	2000      	movs	r0, #0
 8000350:	f7ff ff38 	bl	80001c4 <LCD_Send>
	LCD_Command(0x32);
 8000354:	2132      	movs	r1, #50	; 0x32
 8000356:	2000      	movs	r0, #0
 8000358:	f7ff ff34 	bl	80001c4 <LCD_Send>
	LCD_Command(0x28);
 800035c:	2128      	movs	r1, #40	; 0x28
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ff30 	bl	80001c4 <LCD_Send>
	LCD_Command(0x0C);
 8000364:	210c      	movs	r1, #12
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff ff2c 	bl	80001c4 <LCD_Send>
	LCD_Command(0x06);
 800036c:	2106      	movs	r1, #6
 800036e:	2000      	movs	r0, #0
 8000370:	f7ff ff28 	bl	80001c4 <LCD_Send>
	LCD_Clear();
 8000374:	f000 f804 	bl	8000380 <LCD_Clear>
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40010c00 	.word	0x40010c00

08000380 <LCD_Clear>:

void LCD_Clear(){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	LCD_Command(0x01);
 8000384:	2101      	movs	r1, #1
 8000386:	2000      	movs	r0, #0
 8000388:	f7ff ff1c 	bl	80001c4 <LCD_Send>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 fd22 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f812 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f000 f8a2 	bl	80004e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003a0:	f000 f854 	bl	800044c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80003a4:	f7ff ffca 	bl	800033c <LCD_Init>
  HAL_Delay(10);
 80003a8:	200a      	movs	r0, #10
 80003aa:	f000 fd79 	bl	8000ea0 <HAL_Delay>
//  LCD_SetCursor(0,0);
//  LCD_Print("**VENDING  MACHINE**");
//  LCD_SetCursor(0, 1);
//  LCD_Print("    by Lapitech     ");
  task_init();
 80003ae:	f000 fa03 	bl	80007b8 <task_init>
  HAL_TIM_Base_Start_IT(&htim2);
 80003b2:	4802      	ldr	r0, [pc, #8]	; (80003bc <main+0x2c>)
 80003b4:	f001 fc5b 	bl	8001c6e <HAL_TIM_Base_Start_IT>
//  LCD_Clear();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <main+0x28>
 80003ba:	bf00      	nop
 80003bc:	2000002c 	.word	0x2000002c

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b090      	sub	sp, #64	; 0x40
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	2228      	movs	r2, #40	; 0x28
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 ffce 	bl	8002370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e2:	2301      	movs	r3, #1
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	2302      	movs	r3, #2
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000402:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000404:	f107 0318 	add.w	r3, r7, #24
 8000408:	4618      	mov	r0, r3
 800040a:	f001 f81b 	bl	8001444 <HAL_RCC_OscConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000414:	f000 f904 	bl	8000620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	230f      	movs	r3, #15
 800041a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041c:	2302      	movs	r3, #2
 800041e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2102      	movs	r1, #2
 8000432:	4618      	mov	r0, r3
 8000434:	f001 fa86 	bl	8001944 <HAL_RCC_ClockConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800043e:	f000 f8ef 	bl	8000620 <Error_Handler>
  }
}
 8000442:	bf00      	nop
 8000444:	3740      	adds	r7, #64	; 0x40
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000460:	463b      	mov	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000468:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <MX_TIM2_Init+0x94>)
 800046a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800046e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_TIM2_Init+0x94>)
 8000472:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_TIM2_Init+0x94>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6-1;
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_TIM2_Init+0x94>)
 8000480:	2205      	movs	r2, #5
 8000482:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_TIM2_Init+0x94>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <MX_TIM2_Init+0x94>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <MX_TIM2_Init+0x94>)
 8000492:	f001 fbc1 	bl	8001c18 <HAL_TIM_Base_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800049c:	f000 f8c0 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4619      	mov	r1, r3
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <MX_TIM2_Init+0x94>)
 80004ae:	f001 fd09 	bl	8001ec4 <HAL_TIM_ConfigClockSource>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004b8:	f000 f8b2 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004bc:	2300      	movs	r3, #0
 80004be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004c4:	463b      	mov	r3, r7
 80004c6:	4619      	mov	r1, r3
 80004c8:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_TIM2_Init+0x94>)
 80004ca:	f001 fed7 	bl	800227c <HAL_TIMEx_MasterConfigSynchronization>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004d4:	f000 f8a4 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	3718      	adds	r7, #24
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000002c 	.word	0x2000002c

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f8:	4b45      	ldr	r3, [pc, #276]	; (8000610 <MX_GPIO_Init+0x12c>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a44      	ldr	r2, [pc, #272]	; (8000610 <MX_GPIO_Init+0x12c>)
 80004fe:	f043 0310 	orr.w	r3, r3, #16
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b42      	ldr	r3, [pc, #264]	; (8000610 <MX_GPIO_Init+0x12c>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0310 	and.w	r3, r3, #16
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000510:	4b3f      	ldr	r3, [pc, #252]	; (8000610 <MX_GPIO_Init+0x12c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a3e      	ldr	r2, [pc, #248]	; (8000610 <MX_GPIO_Init+0x12c>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <MX_GPIO_Init+0x12c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0320 	and.w	r3, r3, #32
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b39      	ldr	r3, [pc, #228]	; (8000610 <MX_GPIO_Init+0x12c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a38      	ldr	r2, [pc, #224]	; (8000610 <MX_GPIO_Init+0x12c>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b36      	ldr	r3, [pc, #216]	; (8000610 <MX_GPIO_Init+0x12c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000540:	4b33      	ldr	r3, [pc, #204]	; (8000610 <MX_GPIO_Init+0x12c>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a32      	ldr	r2, [pc, #200]	; (8000610 <MX_GPIO_Init+0x12c>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b30      	ldr	r3, [pc, #192]	; (8000610 <MX_GPIO_Init+0x12c>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0308 	and.w	r3, r3, #8
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	482d      	ldr	r0, [pc, #180]	; (8000614 <MX_GPIO_Init+0x130>)
 8000560:	f000 ff3f 	bl	80013e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LCD_D5_Pin|LCD_D6_Pin 
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 51ce 	mov.w	r1, #6592	; 0x19c0
 800056a:	482b      	ldr	r0, [pc, #172]	; (8000618 <MX_GPIO_Init+0x134>)
 800056c:	f000 ff39 	bl	80013e2 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin 
 8000570:	2200      	movs	r2, #0
 8000572:	f64f 4183 	movw	r1, #64643	; 0xfc83
 8000576:	4829      	ldr	r0, [pc, #164]	; (800061c <MX_GPIO_Init+0x138>)
 8000578:	f000 ff33 	bl	80013e2 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin|LCD_D4_Pin 
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 800057c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2302      	movs	r3, #2
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	481f      	ldr	r0, [pc, #124]	; (8000614 <MX_GPIO_Init+0x130>)
 8000596:	f000 fdb3 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB_Cancel_Pin PB_Process_Pin */
  GPIO_InitStruct.Pin = PB_Cancel_Pin|PB_Process_Pin;
 800059a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	4819      	ldr	r0, [pc, #100]	; (8000614 <MX_GPIO_Init+0x130>)
 80005b0:	f000 fda6 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : Koin_500_Pin Koin_1000_Pin */
  GPIO_InitStruct.Pin = Koin_500_Pin|Koin_1000_Pin;
 80005b4:	2303      	movs	r3, #3
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <MX_GPIO_Init+0x134>)
 80005c8:	f000 fd9a 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LCD_D5_Pin LCD_D6_Pin 
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LCD_D5_Pin|LCD_D6_Pin 
 80005cc:	f44f 53ce 	mov.w	r3, #6592	; 0x19c0
 80005d0:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2302      	movs	r3, #2
 80005dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <MX_GPIO_Init+0x134>)
 80005e6:	f000 fd8b 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LED_5_Pin LED_6_Pin 
                           LCD_RS_Pin LCD_RW_Pin LCD_EN_Pin LCD_D4_Pin 
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin 
 80005ea:	f64f 4383 	movw	r3, #64643	; 0xfc83
 80005ee:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_EN_Pin|LCD_D4_Pin 
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4619      	mov	r1, r3
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <MX_GPIO_Init+0x138>)
 8000604:	f000 fd7c 	bl	8001100 <HAL_GPIO_Init>

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000
 8000614:	40011000 	.word	0x40011000
 8000618:	40010800 	.word	0x40010800
 800061c:	40010c00 	.word	0x40010c00

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <HAL_MspInit+0x5c>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_MspInit+0x5c>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_MspInit+0x60>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <HAL_MspInit+0x60>)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	40021000 	.word	0x40021000
 800068c:	40010000 	.word	0x40010000

08000690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006a0:	d113      	bne.n	80006ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_TIM_Base_MspInit+0x44>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <HAL_TIM_Base_MspInit+0x44>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_TIM_Base_MspInit+0x44>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	201c      	movs	r0, #28
 80006c0:	f000 fce7 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006c4:	201c      	movs	r0, #28
 80006c6:	f000 fd00 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <HardFault_Handler+0x4>

080006ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <MemManage_Handler+0x4>

080006f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <BusFault_Handler+0x4>

080006f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <UsageFault_Handler+0x4>

080006fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 fba0 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <TIM2_IRQHandler+0x1c>)
 8000732:	f001 fabf 	bl	8001cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8000736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <TIM2_IRQHandler+0x20>)
 800073c:	f000 fe69 	bl	8001412 <HAL_GPIO_TogglePin>
  task_run();
 8000740:	f000 f862 	bl	8000808 <task_run>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000002c 	.word	0x2000002c
 800074c:	40011000 	.word	0x40011000

08000750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <SystemInit+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <SystemInit+0x5c>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <SystemInit+0x5c>)
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	4911      	ldr	r1, [pc, #68]	; (80007ac <SystemInit+0x5c>)
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <SystemInit+0x60>)
 8000768:	4013      	ands	r3, r2
 800076a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x5c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <SystemInit+0x5c>)
 8000772:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <SystemInit+0x5c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <SystemInit+0x5c>)
 8000782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000786:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <SystemInit+0x5c>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <SystemInit+0x5c>)
 800078e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000792:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SystemInit+0x5c>)
 8000796:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800079a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SystemInit+0x64>)
 800079e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	40021000 	.word	0x40021000
 80007b0:	f8ff0000 	.word	0xf8ff0000
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <task_init>:
volatile uint8_t debounce2=0xFF;
volatile uint8_t debounce3=0xFF;
volatile uint8_t debounce4=0xFF;
uint16_t delaytime;

void task_init(){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
//	LCD_Init();
	kondisi=start;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <task_init+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
	led_minuman_OFF;
 80007c2:	2201      	movs	r2, #1
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <task_init+0x48>)
 80007c8:	f000 fe0b 	bl	80013e2 <HAL_GPIO_WritePin>
	led_proses_OFF;
 80007cc:	2201      	movs	r2, #1
 80007ce:	2101      	movs	r1, #1
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <task_init+0x4c>)
 80007d2:	f000 fe06 	bl	80013e2 <HAL_GPIO_WritePin>
	led_koinOut_OFF;
 80007d6:	2201      	movs	r2, #1
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <task_init+0x48>)
 80007dc:	f000 fe01 	bl	80013e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2102      	movs	r1, #2
 80007e4:	4807      	ldr	r0, [pc, #28]	; (8000804 <task_init+0x4c>)
 80007e6:	f000 fdfc 	bl	80013e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <task_init+0x4c>)
 80007f2:	f000 fdf6 	bl	80013e2 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000070 	.word	0x20000070
 8000800:	40010800 	.word	0x40010800
 8000804:	40010c00 	.word	0x40010c00

08000808 <task_run>:

void task_run(){
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	switch(kondisi){
 800080c:	4bc4      	ldr	r3, [pc, #784]	; (8000b20 <task_run+0x318>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b08      	cmp	r3, #8
 8000812:	f200 81dc 	bhi.w	8000bce <task_run+0x3c6>
 8000816:	a201      	add	r2, pc, #4	; (adr r2, 800081c <task_run+0x14>)
 8000818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081c:	08000841 	.word	0x08000841
 8000820:	08000873 	.word	0x08000873
 8000824:	080008ab 	.word	0x080008ab
 8000828:	080008df 	.word	0x080008df
 800082c:	08000945 	.word	0x08000945
 8000830:	080009b9 	.word	0x080009b9
 8000834:	08000a71 	.word	0x08000a71
 8000838:	08000ac9 	.word	0x08000ac9
 800083c:	08000b69 	.word	0x08000b69
	case start:{
		LCD_SetCursor(0,0);
 8000840:	2100      	movs	r1, #0
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fd45 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 8000848:	48b6      	ldr	r0, [pc, #728]	; (8000b24 <task_run+0x31c>)
 800084a:	f7ff fd2d 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0, 1);
 800084e:	2101      	movs	r1, #1
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fd3e 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("    by Lapitech     ");
 8000856:	48b4      	ldr	r0, [pc, #720]	; (8000b28 <task_run+0x320>)
 8000858:	f7ff fd26 	bl	80002a8 <LCD_Print>
		next_kondisi=k0;
 800085c:	4bb3      	ldr	r3, [pc, #716]	; (8000b2c <task_run+0x324>)
 800085e:	2203      	movs	r2, #3
 8000860:	701a      	strb	r2, [r3, #0]
		kondisi=delay;
 8000862:	4baf      	ldr	r3, [pc, #700]	; (8000b20 <task_run+0x318>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
		delaytime=500;
 8000868:	4bb1      	ldr	r3, [pc, #708]	; (8000b30 <task_run+0x328>)
 800086a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800086e:	801a      	strh	r2, [r3, #0]
		break;
 8000870:	e1ad      	b.n	8000bce <task_run+0x3c6>
	}

	case delay:{
		delaytime--;
 8000872:	4baf      	ldr	r3, [pc, #700]	; (8000b30 <task_run+0x328>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	3b01      	subs	r3, #1
 8000878:	b29a      	uxth	r2, r3
 800087a:	4bad      	ldr	r3, [pc, #692]	; (8000b30 <task_run+0x328>)
 800087c:	801a      	strh	r2, [r3, #0]
		if(delaytime==0){
 800087e:	4bac      	ldr	r3, [pc, #688]	; (8000b30 <task_run+0x328>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f040 819c 	bne.w	8000bc0 <task_run+0x3b8>

			kondisi=next_kondisi;
 8000888:	4ba8      	ldr	r3, [pc, #672]	; (8000b2c <task_run+0x324>)
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	4ba4      	ldr	r3, [pc, #656]	; (8000b20 <task_run+0x318>)
 800088e:	701a      	strb	r2, [r3, #0]
			led_koinOut_OFF;
 8000890:	2201      	movs	r2, #1
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	48a7      	ldr	r0, [pc, #668]	; (8000b34 <task_run+0x32c>)
 8000896:	f000 fda4 	bl	80013e2 <HAL_GPIO_WritePin>
			led_minuman_OFF;
 800089a:	2201      	movs	r2, #1
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	48a5      	ldr	r0, [pc, #660]	; (8000b34 <task_run+0x32c>)
 80008a0:	f000 fd9f 	bl	80013e2 <HAL_GPIO_WritePin>
			LCD_Clear();
 80008a4:	f7ff fd6c 	bl	8000380 <LCD_Clear>
		}
		break;
 80008a8:	e18a      	b.n	8000bc0 <task_run+0x3b8>
	}

	case buzzer:{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	48a2      	ldr	r0, [pc, #648]	; (8000b38 <task_run+0x330>)
 80008b0:	f000 fd97 	bl	80013e2 <HAL_GPIO_WritePin>
		delaytime--;
 80008b4:	4b9e      	ldr	r3, [pc, #632]	; (8000b30 <task_run+0x328>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b9c      	ldr	r3, [pc, #624]	; (8000b30 <task_run+0x328>)
 80008be:	801a      	strh	r2, [r3, #0]
		LCD_Clear();
 80008c0:	f7ff fd5e 	bl	8000380 <LCD_Clear>
		if(delaytime==0){
 80008c4:	4b9a      	ldr	r3, [pc, #616]	; (8000b30 <task_run+0x328>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d108      	bne.n	80008de <task_run+0xd6>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	4899      	ldr	r0, [pc, #612]	; (8000b38 <task_run+0x330>)
 80008d2:	f000 fd86 	bl	80013e2 <HAL_GPIO_WritePin>
			kondisi=next_kondisi;
 80008d6:	4b95      	ldr	r3, [pc, #596]	; (8000b2c <task_run+0x324>)
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	4b91      	ldr	r3, [pc, #580]	; (8000b20 <task_run+0x318>)
 80008dc:	701a      	strb	r2, [r3, #0]
		}

	}

	case k0:{
		LCD_SetCursor(0,0);
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fcf6 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 80008e6:	488f      	ldr	r0, [pc, #572]	; (8000b24 <task_run+0x31c>)
 80008e8:	f7ff fcde 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,1);
 80008ec:	2101      	movs	r1, #1
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fcef 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("   Minuman Rp.1000  ");
 80008f4:	4891      	ldr	r0, [pc, #580]	; (8000b3c <task_run+0x334>)
 80008f6:	f7ff fcd7 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0, 3);
 80008fa:	2103      	movs	r1, #3
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fce8 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("    Masukkan Koin   ");
 8000902:	488f      	ldr	r0, [pc, #572]	; (8000b40 <task_run+0x338>)
 8000904:	f7ff fcd0 	bl	80002a8 <LCD_Print>

		if(Koin500_masuk()){
 8000908:	f000 f974 	bl	8000bf4 <Koin500_masuk>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d008      	beq.n	8000924 <task_run+0x11c>
			kondisi=buzzer;
 8000912:	4b83      	ldr	r3, [pc, #524]	; (8000b20 <task_run+0x318>)
 8000914:	2202      	movs	r2, #2
 8000916:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000918:	4b85      	ldr	r3, [pc, #532]	; (8000b30 <task_run+0x328>)
 800091a:	2203      	movs	r2, #3
 800091c:	801a      	strh	r2, [r3, #0]
			next_kondisi=k500;
 800091e:	4b83      	ldr	r3, [pc, #524]	; (8000b2c <task_run+0x324>)
 8000920:	2204      	movs	r2, #4
 8000922:	701a      	strb	r2, [r3, #0]
		}

		if(Koin1000_masuk()){
 8000924:	f000 f99e 	bl	8000c64 <Koin1000_masuk>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 814a 	beq.w	8000bc4 <task_run+0x3bc>
			kondisi=buzzer;
 8000930:	4b7b      	ldr	r3, [pc, #492]	; (8000b20 <task_run+0x318>)
 8000932:	2202      	movs	r2, #2
 8000934:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000936:	4b7e      	ldr	r3, [pc, #504]	; (8000b30 <task_run+0x328>)
 8000938:	2203      	movs	r2, #3
 800093a:	801a      	strh	r2, [r3, #0]
			next_kondisi=k1000;
 800093c:	4b7b      	ldr	r3, [pc, #492]	; (8000b2c <task_run+0x324>)
 800093e:	2205      	movs	r2, #5
 8000940:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000942:	e13f      	b.n	8000bc4 <task_run+0x3bc>
	}

	case k500:{
		LCD_SetCursor(0,0);
 8000944:	2100      	movs	r1, #0
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fcc3 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 800094c:	4875      	ldr	r0, [pc, #468]	; (8000b24 <task_run+0x31c>)
 800094e:	f7ff fcab 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,1);
 8000952:	2101      	movs	r1, #1
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fcbc 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("   Minuman Rp.1000  ");
 800095a:	4878      	ldr	r0, [pc, #480]	; (8000b3c <task_run+0x334>)
 800095c:	f7ff fca4 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,3);
 8000960:	2103      	movs	r1, #3
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fcb5 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("    Masukkan Koin   ");
 8000968:	4875      	ldr	r0, [pc, #468]	; (8000b40 <task_run+0x338>)
 800096a:	f7ff fc9d 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(2,2);
 800096e:	2102      	movs	r1, #2
 8000970:	2002      	movs	r0, #2
 8000972:	f7ff fcae 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("Koin masuk = 500");
 8000976:	4873      	ldr	r0, [pc, #460]	; (8000b44 <task_run+0x33c>)
 8000978:	f7ff fc96 	bl	80002a8 <LCD_Print>

		if(Koin500_masuk()){
 800097c:	f000 f93a 	bl	8000bf4 <Koin500_masuk>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d008      	beq.n	8000998 <task_run+0x190>
			kondisi=buzzer;
 8000986:	4b66      	ldr	r3, [pc, #408]	; (8000b20 <task_run+0x318>)
 8000988:	2202      	movs	r2, #2
 800098a:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 800098c:	4b68      	ldr	r3, [pc, #416]	; (8000b30 <task_run+0x328>)
 800098e:	2203      	movs	r2, #3
 8000990:	801a      	strh	r2, [r3, #0]
			next_kondisi=k1000;
 8000992:	4b66      	ldr	r3, [pc, #408]	; (8000b2c <task_run+0x324>)
 8000994:	2205      	movs	r2, #5
 8000996:	701a      	strb	r2, [r3, #0]
		}

		if(batal_ok()){
 8000998:	f000 f9cc 	bl	8000d34 <batal_ok>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 8112 	beq.w	8000bc8 <task_run+0x3c0>
			kondisi=buzzer;
 80009a4:	4b5e      	ldr	r3, [pc, #376]	; (8000b20 <task_run+0x318>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 80009aa:	4b61      	ldr	r3, [pc, #388]	; (8000b30 <task_run+0x328>)
 80009ac:	2203      	movs	r2, #3
 80009ae:	801a      	strh	r2, [r3, #0]
			next_kondisi=transaksi_batal;
 80009b0:	4b5e      	ldr	r3, [pc, #376]	; (8000b2c <task_run+0x324>)
 80009b2:	2207      	movs	r2, #7
 80009b4:	701a      	strb	r2, [r3, #0]
//			kondisi=buzzer;
//			delaytime=3;
//			next_kondisi=kembali500;
//		}

		break;
 80009b6:	e107      	b.n	8000bc8 <task_run+0x3c0>
	}

	case k1000:{
		LCD_SetCursor(0,0);
 80009b8:	2100      	movs	r1, #0
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fc89 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 80009c0:	4858      	ldr	r0, [pc, #352]	; (8000b24 <task_run+0x31c>)
 80009c2:	f7ff fc71 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,2);
 80009c6:	2102      	movs	r1, #2
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff fc82 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("tekan tombol proses");
 80009ce:	485e      	ldr	r0, [pc, #376]	; (8000b48 <task_run+0x340>)
 80009d0:	f7ff fc6a 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(1,3);
 80009d4:	2103      	movs	r1, #3
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff fc7b 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("untuk melanjutkan");
 80009dc:	485b      	ldr	r0, [pc, #364]	; (8000b4c <task_run+0x344>)
 80009de:	f7ff fc63 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(2,1);
 80009e2:	2101      	movs	r1, #1
 80009e4:	2002      	movs	r0, #2
 80009e6:	f7ff fc74 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("Koin masuk = 1000");
 80009ea:	4859      	ldr	r0, [pc, #356]	; (8000b50 <task_run+0x348>)
 80009ec:	f7ff fc5c 	bl	80002a8 <LCD_Print>

		led_proses_ON;
 80009f0:	2200      	movs	r2, #0
 80009f2:	2101      	movs	r1, #1
 80009f4:	4850      	ldr	r0, [pc, #320]	; (8000b38 <task_run+0x330>)
 80009f6:	f000 fcf4 	bl	80013e2 <HAL_GPIO_WritePin>

		if(proses_ok()){
 80009fa:	f000 f96d 	bl	8000cd8 <proses_ok>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00d      	beq.n	8000a20 <task_run+0x218>
			led_proses_OFF;
 8000a04:	2201      	movs	r2, #1
 8000a06:	2101      	movs	r1, #1
 8000a08:	484b      	ldr	r0, [pc, #300]	; (8000b38 <task_run+0x330>)
 8000a0a:	f000 fcea 	bl	80013e2 <HAL_GPIO_WritePin>
			kondisi=buzzer;
 8000a0e:	4b44      	ldr	r3, [pc, #272]	; (8000b20 <task_run+0x318>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000a14:	4b46      	ldr	r3, [pc, #280]	; (8000b30 <task_run+0x328>)
 8000a16:	2203      	movs	r2, #3
 8000a18:	801a      	strh	r2, [r3, #0]
			next_kondisi=minuman_out;
 8000a1a:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <task_run+0x324>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	701a      	strb	r2, [r3, #0]
		}

		if(batal_ok()){
 8000a20:	f000 f988 	bl	8000d34 <batal_ok>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00d      	beq.n	8000a46 <task_run+0x23e>
			led_proses_OFF;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4842      	ldr	r0, [pc, #264]	; (8000b38 <task_run+0x330>)
 8000a30:	f000 fcd7 	bl	80013e2 <HAL_GPIO_WritePin>
			kondisi=buzzer;
 8000a34:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <task_run+0x318>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000a3a:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <task_run+0x328>)
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	801a      	strh	r2, [r3, #0]
			next_kondisi=transaksi_batal;
 8000a40:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <task_run+0x324>)
 8000a42:	2207      	movs	r2, #7
 8000a44:	701a      	strb	r2, [r3, #0]
		}

		if(Koin500_masuk()||Koin1000_masuk()){
 8000a46:	f000 f8d5 	bl	8000bf4 <Koin500_masuk>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d105      	bne.n	8000a5c <task_run+0x254>
 8000a50:	f000 f908 	bl	8000c64 <Koin1000_masuk>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80b8 	beq.w	8000bcc <task_run+0x3c4>
			kondisi=buzzer;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <task_run+0x318>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	701a      	strb	r2, [r3, #0]
			delaytime=3;
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <task_run+0x328>)
 8000a64:	2203      	movs	r2, #3
 8000a66:	801a      	strh	r2, [r3, #0]
			next_kondisi=koin_kembali;
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <task_run+0x324>)
 8000a6a:	2206      	movs	r2, #6
 8000a6c:	701a      	strb	r2, [r3, #0]
//			kondisi=buzzer;
//			delaytime=3;
//			next_kondisi=koin_kembali;
//		}

		break;
 8000a6e:	e0ad      	b.n	8000bcc <task_run+0x3c4>
	}

	case koin_kembali:{
		LCD_SetCursor(0,0);
 8000a70:	2100      	movs	r1, #0
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff fc2d 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 8000a78:	482a      	ldr	r0, [pc, #168]	; (8000b24 <task_run+0x31c>)
 8000a7a:	f7ff fc15 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,1);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fc26 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("                    ");
 8000a86:	4833      	ldr	r0, [pc, #204]	; (8000b54 <task_run+0x34c>)
 8000a88:	f7ff fc0e 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(2, 2);
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f7ff fc1f 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("uang mencukupi");
 8000a94:	4830      	ldr	r0, [pc, #192]	; (8000b58 <task_run+0x350>)
 8000a96:	f7ff fc07 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(4, 3);
 8000a9a:	2103      	movs	r1, #3
 8000a9c:	2004      	movs	r0, #4
 8000a9e:	f7ff fc18 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("koin kembali  ");
 8000aa2:	482e      	ldr	r0, [pc, #184]	; (8000b5c <task_run+0x354>)
 8000aa4:	f7ff fc00 	bl	80002a8 <LCD_Print>

		led_koinOut_ON;
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	4821      	ldr	r0, [pc, #132]	; (8000b34 <task_run+0x32c>)
 8000aae:	f000 fc98 	bl	80013e2 <HAL_GPIO_WritePin>
		kondisi=delay;
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <task_run+0x318>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
		delaytime=500;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <task_run+0x328>)
 8000aba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000abe:	801a      	strh	r2, [r3, #0]
		next_kondisi=k1000;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <task_run+0x324>)
 8000ac2:	2205      	movs	r2, #5
 8000ac4:	701a      	strb	r2, [r3, #0]
		break;
 8000ac6:	e082      	b.n	8000bce <task_run+0x3c6>
	}

	case transaksi_batal:{
		LCD_SetCursor(0,0);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fc01 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 8000ad0:	4814      	ldr	r0, [pc, #80]	; (8000b24 <task_run+0x31c>)
 8000ad2:	f7ff fbe9 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,1);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fbfa 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("                    ");
 8000ade:	481d      	ldr	r0, [pc, #116]	; (8000b54 <task_run+0x34c>)
 8000ae0:	f7ff fbe2 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(2, 2);
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f7ff fbf3 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("Transaksi Batal");
 8000aec:	481c      	ldr	r0, [pc, #112]	; (8000b60 <task_run+0x358>)
 8000aee:	f7ff fbdb 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(4, 3);
 8000af2:	2103      	movs	r1, #3
 8000af4:	2004      	movs	r0, #4
 8000af6:	f7ff fbec 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("uang kembali  ");
 8000afa:	481a      	ldr	r0, [pc, #104]	; (8000b64 <task_run+0x35c>)
 8000afc:	f7ff fbd4 	bl	80002a8 <LCD_Print>

		led_koinOut_ON;
 8000b00:	2200      	movs	r2, #0
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <task_run+0x32c>)
 8000b06:	f000 fc6c 	bl	80013e2 <HAL_GPIO_WritePin>
		kondisi=delay;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <task_run+0x318>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
		delaytime=2000;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <task_run+0x328>)
 8000b12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b16:	801a      	strh	r2, [r3, #0]
		next_kondisi=start;
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <task_run+0x324>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
		break;
 8000b1e:	e056      	b.n	8000bce <task_run+0x3c6>
 8000b20:	20000070 	.word	0x20000070
 8000b24:	08002398 	.word	0x08002398
 8000b28:	080023b0 	.word	0x080023b0
 8000b2c:	2000006c 	.word	0x2000006c
 8000b30:	2000006e 	.word	0x2000006e
 8000b34:	40010800 	.word	0x40010800
 8000b38:	40010c00 	.word	0x40010c00
 8000b3c:	080023c8 	.word	0x080023c8
 8000b40:	080023e0 	.word	0x080023e0
 8000b44:	080023f8 	.word	0x080023f8
 8000b48:	0800240c 	.word	0x0800240c
 8000b4c:	08002420 	.word	0x08002420
 8000b50:	08002434 	.word	0x08002434
 8000b54:	08002448 	.word	0x08002448
 8000b58:	08002460 	.word	0x08002460
 8000b5c:	08002470 	.word	0x08002470
 8000b60:	08002480 	.word	0x08002480
 8000b64:	08002490 	.word	0x08002490
	}

	case minuman_out:{
		LCD_SetCursor(0,0);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff fbb1 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("**VENDING  MACHINE**");
 8000b70:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <task_run+0x3cc>)
 8000b72:	f7ff fb99 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(1,1);
 8000b76:	2101      	movs	r1, #1
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff fbaa 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("pembelian berhasil");
 8000b7e:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <task_run+0x3d0>)
 8000b80:	f7ff fb92 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(1,2);
 8000b84:	2102      	movs	r1, #2
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff fba3 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("silahkan mengambil");
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <task_run+0x3d4>)
 8000b8e:	f7ff fb8b 	bl	80002a8 <LCD_Print>
		LCD_SetCursor(0,3);
 8000b92:	2103      	movs	r1, #3
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fb9c 	bl	80002d2 <LCD_SetCursor>
		LCD_Print("       minuman      ");
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <task_run+0x3d8>)
 8000b9c:	f7ff fb84 	bl	80002a8 <LCD_Print>

		led_minuman_ON;
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2140      	movs	r1, #64	; 0x40
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <task_run+0x3dc>)
 8000ba6:	f000 fc1c 	bl	80013e2 <HAL_GPIO_WritePin>
		kondisi=delay;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <task_run+0x3e0>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
		delaytime=2000;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <task_run+0x3e4>)
 8000bb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bb6:	801a      	strh	r2, [r3, #0]
		next_kondisi=start;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <task_run+0x3e8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
		break;
 8000bbe:	e006      	b.n	8000bce <task_run+0x3c6>
		break;
 8000bc0:	bf00      	nop
 8000bc2:	e004      	b.n	8000bce <task_run+0x3c6>
		break;
 8000bc4:	bf00      	nop
 8000bc6:	e002      	b.n	8000bce <task_run+0x3c6>
		break;
 8000bc8:	bf00      	nop
 8000bca:	e000      	b.n	8000bce <task_run+0x3c6>
		break;
 8000bcc:	bf00      	nop

	}

	}
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08002398 	.word	0x08002398
 8000bd8:	080024a0 	.word	0x080024a0
 8000bdc:	080024b4 	.word	0x080024b4
 8000be0:	080024c8 	.word	0x080024c8
 8000be4:	40010800 	.word	0x40010800
 8000be8:	20000070 	.word	0x20000070
 8000bec:	2000006e 	.word	0x2000006e
 8000bf0:	2000006c 	.word	0x2000006c

08000bf4 <Koin500_masuk>:

unsigned char Koin500_masuk(void){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(Koin_500_GPIO_Port,Koin_500_Pin)== GPIO_PIN_RESET){
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4815      	ldr	r0, [pc, #84]	; (8000c58 <Koin500_masuk+0x64>)
 8000c02:	f000 fbd7 	bl	80013b4 <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10b      	bne.n	8000c24 <Koin500_masuk+0x30>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <Koin500_masuk+0x68>)
 8000c12:	f000 fbe6 	bl	80013e2 <HAL_GPIO_WritePin>
		debounce=(debounce<<2);
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <Koin500_masuk+0x6c>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <Koin500_masuk+0x6c>)
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e00e      	b.n	8000c42 <Koin500_masuk+0x4e>
	} else {
		debounce= (debounce<<2)|3;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <Koin500_masuk+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	f043 0303 	orr.w	r3, r3, #3
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <Koin500_masuk+0x6c>)
 8000c36:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <Koin500_masuk+0x68>)
 8000c3e:	f000 fbd0 	bl	80013e2 <HAL_GPIO_WritePin>
	}
	if (debounce==0x03) {
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <Koin500_masuk+0x6c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d101      	bne.n	8000c4e <Koin500_masuk+0x5a>
		detectedFLag=1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	20000004 	.word	0x20000004

08000c64 <Koin1000_masuk>:

unsigned char Koin1000_masuk(void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(Koin_1000_GPIO_Port,Koin_1000_Pin)== GPIO_PIN_RESET){
 8000c6e:	2102      	movs	r1, #2
 8000c70:	4816      	ldr	r0, [pc, #88]	; (8000ccc <Koin1000_masuk+0x68>)
 8000c72:	f000 fb9f 	bl	80013b4 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10c      	bne.n	8000c96 <Koin1000_masuk+0x32>
		HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c82:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <Koin1000_masuk+0x6c>)
 8000c84:	f000 fbad 	bl	80013e2 <HAL_GPIO_WritePin>
		debounce=(debounce<<2);
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <Koin1000_masuk+0x70>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <Koin1000_masuk+0x70>)
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e00f      	b.n	8000cb6 <Koin1000_masuk+0x52>
	} else {
		debounce= (debounce<<2)|3;
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <Koin1000_masuk+0x70>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	f043 0303 	orr.w	r3, r3, #3
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <Koin1000_masuk+0x70>)
 8000ca8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <Koin1000_masuk+0x6c>)
 8000cb2:	f000 fb96 	bl	80013e2 <HAL_GPIO_WritePin>
	}
	if (debounce==0x03) {
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <Koin1000_masuk+0x70>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d101      	bne.n	8000cc2 <Koin1000_masuk+0x5e>
		detectedFLag=1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	20000005 	.word	0x20000005

08000cd8 <proses_ok>:

unsigned char proses_ok(void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_Process_GPIO_Port,PB_Process_Pin)== GPIO_PIN_RESET){
 8000ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce6:	4811      	ldr	r0, [pc, #68]	; (8000d2c <proses_ok+0x54>)
 8000ce8:	f000 fb64 	bl	80013b4 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d106      	bne.n	8000d00 <proses_ok+0x28>
		debounce=(debounce<<2);
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <proses_ok+0x58>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <proses_ok+0x58>)
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e009      	b.n	8000d14 <proses_ok+0x3c>
	} else {
		debounce= (debounce<<2)|3;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <proses_ok+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	f043 0303 	orr.w	r3, r3, #3
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <proses_ok+0x58>)
 8000d12:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <proses_ok+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d101      	bne.n	8000d20 <proses_ok+0x48>
		detectedFLag=1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	20000006 	.word	0x20000006

08000d34 <batal_ok>:

unsigned char batal_ok(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PB_Cancel_GPIO_Port,PB_Cancel_Pin)== GPIO_PIN_RESET){
 8000d3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <batal_ok+0x54>)
 8000d44:	f000 fb36 	bl	80013b4 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d106      	bne.n	8000d5c <batal_ok+0x28>
		debounce=(debounce<<2);
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <batal_ok+0x58>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <batal_ok+0x58>)
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e009      	b.n	8000d70 <batal_ok+0x3c>
	} else {
		debounce= (debounce<<2)|3;
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <batal_ok+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	f043 0303 	orr.w	r3, r3, #3
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <batal_ok+0x58>)
 8000d6e:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <batal_ok+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d101      	bne.n	8000d7c <batal_ok+0x48>
		detectedFLag=1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	20000007 	.word	0x20000007

08000d90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d92:	e003      	b.n	8000d9c <LoopCopyDataInit>

08000d94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d9a:	3104      	adds	r1, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d9c:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000da0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000da2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000da4:	d3f6      	bcc.n	8000d94 <CopyDataInit>
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000da8:	e002      	b.n	8000db0 <LoopFillZerobss>

08000daa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000dac:	f842 3b04 	str.w	r3, [r2], #4

08000db0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000db2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000db4:	d3f9      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000db6:	f7ff fccb 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f001 fab5 	bl	8002328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dbe:	f7ff fae7 	bl	8000390 <main>
  bx lr
 8000dc2:	4770      	bx	lr
  ldr r3, =_sidata
 8000dc4:	0800250c 	.word	0x0800250c
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dcc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000dd0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000dd4:	20000078 	.word	0x20000078

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x28>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x28>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f945 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fc18 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40022000 	.word	0x40022000

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f95d 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f925 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	2000000c 	.word	0x2000000c
 8000e64:	20000008 	.word	0x20000008

08000e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x1c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_IncTick+0x20>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a03      	ldr	r2, [pc, #12]	; (8000e88 <HAL_IncTick+0x20>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000074 	.word	0x20000074

08000e8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <HAL_GetTick+0x10>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000074 	.word	0x20000074

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff fff0 	bl	8000e8c <HAL_GetTick>
 8000eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_Delay+0x40>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffe0 	bl	8000e8c <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000000c 	.word	0x2000000c

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4906      	ldr	r1, [pc, #24]	; (8000f7c <__NVIC_EnableIRQ+0x34>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff90 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff2d 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff42 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff90 	bl	8000fd4 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5f 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff35 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa2 	bl	8001038 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b08b      	sub	sp, #44	; 0x2c
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	e127      	b.n	8001364 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001114:	2201      	movs	r2, #1
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8116 	bne.w	800135e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b12      	cmp	r3, #18
 8001138:	d034      	beq.n	80011a4 <HAL_GPIO_Init+0xa4>
 800113a:	2b12      	cmp	r3, #18
 800113c:	d80d      	bhi.n	800115a <HAL_GPIO_Init+0x5a>
 800113e:	2b02      	cmp	r3, #2
 8001140:	d02b      	beq.n	800119a <HAL_GPIO_Init+0x9a>
 8001142:	2b02      	cmp	r3, #2
 8001144:	d804      	bhi.n	8001150 <HAL_GPIO_Init+0x50>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d031      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d01c      	beq.n	8001188 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114e:	e048      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001150:	2b03      	cmp	r3, #3
 8001152:	d043      	beq.n	80011dc <HAL_GPIO_Init+0xdc>
 8001154:	2b11      	cmp	r3, #17
 8001156:	d01b      	beq.n	8001190 <HAL_GPIO_Init+0x90>
          break;
 8001158:	e043      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800115a:	4a89      	ldr	r2, [pc, #548]	; (8001380 <HAL_GPIO_Init+0x280>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d026      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 8001160:	4a87      	ldr	r2, [pc, #540]	; (8001380 <HAL_GPIO_Init+0x280>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d806      	bhi.n	8001174 <HAL_GPIO_Init+0x74>
 8001166:	4a87      	ldr	r2, [pc, #540]	; (8001384 <HAL_GPIO_Init+0x284>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d020      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 800116c:	4a86      	ldr	r2, [pc, #536]	; (8001388 <HAL_GPIO_Init+0x288>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01d      	beq.n	80011ae <HAL_GPIO_Init+0xae>
          break;
 8001172:	e036      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001174:	4a85      	ldr	r2, [pc, #532]	; (800138c <HAL_GPIO_Init+0x28c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 800117a:	4a85      	ldr	r2, [pc, #532]	; (8001390 <HAL_GPIO_Init+0x290>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d016      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 8001180:	4a84      	ldr	r2, [pc, #528]	; (8001394 <HAL_GPIO_Init+0x294>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0xae>
          break;
 8001186:	e02c      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	623b      	str	r3, [r7, #32]
          break;
 800118e:	e028      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	3304      	adds	r3, #4
 8001196:	623b      	str	r3, [r7, #32]
          break;
 8001198:	e023      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	3308      	adds	r3, #8
 80011a0:	623b      	str	r3, [r7, #32]
          break;
 80011a2:	e01e      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	330c      	adds	r3, #12
 80011aa:	623b      	str	r3, [r7, #32]
          break;
 80011ac:	e019      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011b6:	2304      	movs	r3, #4
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e012      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d105      	bne.n	80011d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c4:	2308      	movs	r3, #8
 80011c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	611a      	str	r2, [r3, #16]
          break;
 80011ce:	e008      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d0:	2308      	movs	r3, #8
 80011d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	615a      	str	r2, [r3, #20]
          break;
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
          break;
 80011e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2bff      	cmp	r3, #255	; 0xff
 80011e6:	d801      	bhi.n	80011ec <HAL_GPIO_Init+0xec>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	e001      	b.n	80011f0 <HAL_GPIO_Init+0xf0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3304      	adds	r3, #4
 80011f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2bff      	cmp	r3, #255	; 0xff
 80011f6:	d802      	bhi.n	80011fe <HAL_GPIO_Init+0xfe>
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_Init+0x104>
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3b08      	subs	r3, #8
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	210f      	movs	r1, #15
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	401a      	ands	r2, r3
 8001216:	6a39      	ldr	r1, [r7, #32]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	431a      	orrs	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 8096 	beq.w	800135e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001232:	4b59      	ldr	r3, [pc, #356]	; (8001398 <HAL_GPIO_Init+0x298>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a58      	ldr	r2, [pc, #352]	; (8001398 <HAL_GPIO_Init+0x298>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b56      	ldr	r3, [pc, #344]	; (8001398 <HAL_GPIO_Init+0x298>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800124a:	4a54      	ldr	r2, [pc, #336]	; (800139c <HAL_GPIO_Init+0x29c>)
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <HAL_GPIO_Init+0x2a0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x19e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <HAL_GPIO_Init+0x2a4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x19a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <HAL_GPIO_Init+0x2a8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x196>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a48      	ldr	r2, [pc, #288]	; (80013ac <HAL_GPIO_Init+0x2ac>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x192>
 800128e:	2303      	movs	r3, #3
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x1a0>
 8001292:	2304      	movs	r3, #4
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x1a0>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x1a0>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x1a0>
 800129e:	2300      	movs	r3, #0
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012b0:	493a      	ldr	r1, [pc, #232]	; (800139c <HAL_GPIO_Init+0x29c>)
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4938      	ldr	r1, [pc, #224]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d8:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	43db      	mvns	r3, r3
 80012e0:	4933      	ldr	r1, [pc, #204]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f2:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	492e      	ldr	r1, [pc, #184]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	43db      	mvns	r3, r3
 8001308:	4929      	ldr	r1, [pc, #164]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800130a:	4013      	ands	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	4924      	ldr	r1, [pc, #144]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	43db      	mvns	r3, r3
 8001330:	491f      	ldr	r1, [pc, #124]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001332:	4013      	ands	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	491a      	ldr	r1, [pc, #104]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	60cb      	str	r3, [r1, #12]
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	43db      	mvns	r3, r3
 8001358:	4915      	ldr	r1, [pc, #84]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800135a:	4013      	ands	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	3301      	adds	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	f47f aed0 	bne.w	8001114 <HAL_GPIO_Init+0x14>
  }
}
 8001374:	bf00      	nop
 8001376:	372c      	adds	r7, #44	; 0x2c
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	10210000 	.word	0x10210000
 8001384:	10110000 	.word	0x10110000
 8001388:	10120000 	.word	0x10120000
 800138c:	10310000 	.word	0x10310000
 8001390:	10320000 	.word	0x10320000
 8001394:	10220000 	.word	0x10220000
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40011400 	.word	0x40011400
 80013b0:	40010400 	.word	0x40010400

080013b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e001      	b.n	80013d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f2:	787b      	ldrb	r3, [r7, #1]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f8:	887a      	ldrh	r2, [r7, #2]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013fe:	e003      	b.n	8001408 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	041a      	lsls	r2, r3, #16
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001430:	e002      	b.n	8001438 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	611a      	str	r2, [r3, #16]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
	...

08001444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e26c      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8087 	beq.w	8001572 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001464:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b04      	cmp	r3, #4
 800146e:	d00c      	beq.n	800148a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001470:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b08      	cmp	r3, #8
 800147a:	d112      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5e>
 800147c:	4b8c      	ldr	r3, [pc, #560]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d10b      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148a:	4b89      	ldr	r3, [pc, #548]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d06c      	beq.n	8001570 <HAL_RCC_OscConfig+0x12c>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d168      	bne.n	8001570 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e246      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x76>
 80014ac:	4b80      	ldr	r3, [pc, #512]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a7f      	ldr	r2, [pc, #508]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e02e      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x98>
 80014c2:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7a      	ldr	r2, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b78      	ldr	r3, [pc, #480]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e01d      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0xbc>
 80014e6:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a71      	ldr	r2, [pc, #452]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a6e      	ldr	r2, [pc, #440]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 8001500:	4b6b      	ldr	r3, [pc, #428]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a6a      	ldr	r2, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a67      	ldr	r2, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fcb4 	bl	8000e8c <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fcb0 	bl	8000e8c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1fa      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0xe4>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fca0 	bl	8000e8c <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fc9c 	bl	8000e8c <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1e6      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x10c>
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d063      	beq.n	8001646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800158a:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b08      	cmp	r3, #8
 8001594:	d11c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x18c>
 8001596:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x176>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1ba      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4939      	ldr	r1, [pc, #228]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	e03a      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fc55 	bl	8000e8c <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fc51 	bl	8000e8c <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e19b      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e015      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fc34 	bl	8000e8c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001628:	f7ff fc30 	bl	8000e8c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e17a      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03a      	beq.n	80016c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d019      	beq.n	800168e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_RCC_OscConfig+0x274>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fc14 	bl	8000e8c <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fc10 	bl	8000e8c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e15a      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f000 faa8 	bl	8001bdc <RCC_Delay>
 800168c:	e01c      	b.n	80016c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fbfa 	bl	8000e8c <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169a:	e00f      	b.n	80016bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fbf6 	bl	8000e8c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d908      	bls.n	80016bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e140      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	42420000 	.word	0x42420000
 80016b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b9e      	ldr	r3, [pc, #632]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e9      	bne.n	800169c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a6 	beq.w	8001822 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b97      	ldr	r3, [pc, #604]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10d      	bne.n	8001702 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b94      	ldr	r3, [pc, #592]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a93      	ldr	r2, [pc, #588]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b91      	ldr	r3, [pc, #580]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001702:	4b8e      	ldr	r3, [pc, #568]	; (800193c <HAL_RCC_OscConfig+0x4f8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170e:	4b8b      	ldr	r3, [pc, #556]	; (800193c <HAL_RCC_OscConfig+0x4f8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a8a      	ldr	r2, [pc, #552]	; (800193c <HAL_RCC_OscConfig+0x4f8>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff fbb7 	bl	8000e8c <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff fbb3 	bl	8000e8c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0fd      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b81      	ldr	r3, [pc, #516]	; (800193c <HAL_RCC_OscConfig+0x4f8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x312>
 8001748:	4b7b      	ldr	r3, [pc, #492]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a7a      	ldr	r2, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e02d      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x334>
 800175e:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a75      	ldr	r2, [pc, #468]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	4b73      	ldr	r3, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a72      	ldr	r2, [pc, #456]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	e01c      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x356>
 8001780:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a6c      	ldr	r2, [pc, #432]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a69      	ldr	r2, [pc, #420]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 800179a:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a66      	ldr	r2, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6213      	str	r3, [r2, #32]
 80017a6:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a63      	ldr	r2, [pc, #396]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d015      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fb67 	bl	8000e8c <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff fb63 	bl	8000e8c <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0ab      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	4b57      	ldr	r3, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ee      	beq.n	80017c2 <HAL_RCC_OscConfig+0x37e>
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb51 	bl	8000e8c <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb4d 	bl	8000e8c <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e095      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a47      	ldr	r2, [pc, #284]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8081 	beq.w	800192e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d061      	beq.n	80018fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d146      	bne.n	80018ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_RCC_OscConfig+0x4fc>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fb21 	bl	8000e8c <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fb1d 	bl	8000e8c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e067      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d108      	bne.n	8001888 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	492d      	ldr	r1, [pc, #180]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a19      	ldr	r1, [r3, #32]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	430b      	orrs	r3, r1
 800189a:	4927      	ldr	r1, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x4fc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff faf1 	bl	8000e8c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff faed 	bl	8000e8c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e037      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x46a>
 80018cc:	e02f      	b.n	800192e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_RCC_OscConfig+0x4fc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fada 	bl	8000e8c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff fad6 	bl	8000e8c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e020      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x498>
 80018fa:	e018      	b.n	800192e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e013      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	429a      	cmp	r2, r3
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	42420060 	.word	0x42420060

08001944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0d0      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4965      	ldr	r1, [pc, #404]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a52      	ldr	r2, [pc, #328]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d040      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e073      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06b      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4936      	ldr	r1, [pc, #216]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff fa2a 	bl	8000e8c <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff fa26 	bl	8000e8c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e053      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d210      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f821 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1cc>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1d0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f988 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	080024f4 	.word	0x080024f4
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000008 	.word	0x20000008

08001b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	b490      	push	{r4, r7}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b20:	1d3c      	adds	r4, r7, #4
 8001b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x40>
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x46>
 8001b56:	e02d      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b5a:	623b      	str	r3, [r7, #32]
      break;
 8001b5c:	e02d      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	0c9b      	lsrs	r3, r3, #18
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	0c5b      	lsrs	r3, r3, #17
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b96:	fb02 f203 	mul.w	r2, r2, r3
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	e004      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	623b      	str	r3, [r7, #32]
      break;
 8001bb2:	e002      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bb6:	623b      	str	r3, [r7, #32]
      break;
 8001bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bba:	6a3b      	ldr	r3, [r7, #32]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc90      	pop	{r4, r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	080024e0 	.word	0x080024e0
 8001bcc:	080024f0 	.word	0x080024f0
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	007a1200 	.word	0x007a1200
 8001bd8:	003d0900 	.word	0x003d0900

08001bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <RCC_Delay+0x34>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <RCC_Delay+0x38>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0a5b      	lsrs	r3, r3, #9
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf8:	bf00      	nop
  }
  while (Delay --);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	60fa      	str	r2, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f9      	bne.n	8001bf8 <RCC_Delay+0x1c>
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000
 8001c14:	10624dd3 	.word	0x10624dd3

08001c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e01d      	b.n	8001c66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7fe fd26 	bl	8000690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f000 fa18 	bl	800208c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b06      	cmp	r3, #6
 8001c96:	d007      	beq.n	8001ca8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d122      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d11b      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0202 	mvn.w	r2, #2
 8001ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f9ad 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001cfc:	e005      	b.n	8001d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f9a0 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f9af 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d122      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d11b      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0204 	mvn.w	r2, #4
 8001d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f983 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001d50:	e005      	b.n	8001d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f976 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f985 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d122      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d11b      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0208 	mvn.w	r2, #8
 8001d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f959 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f94c 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f95b 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d122      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d11b      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0210 	mvn.w	r2, #16
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2208      	movs	r2, #8
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f92f 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f922 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f931 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0201 	mvn.w	r2, #1
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8fd 	bl	8002032 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b80      	cmp	r3, #128	; 0x80
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	2b80      	cmp	r3, #128	; 0x80
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fa59 	bl	8002316 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6e:	2b40      	cmp	r3, #64	; 0x40
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7c:	2b40      	cmp	r3, #64	; 0x40
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8f5 	bl	800207a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0220 	mvn.w	r2, #32
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fa24 	bl	8002304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_TIM_ConfigClockSource+0x18>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e0a6      	b.n	800202a <HAL_TIM_ConfigClockSource+0x166>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001efa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d067      	beq.n	8001fe4 <HAL_TIM_ConfigClockSource+0x120>
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d80b      	bhi.n	8001f30 <HAL_TIM_ConfigClockSource+0x6c>
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d073      	beq.n	8002004 <HAL_TIM_ConfigClockSource+0x140>
 8001f1c:	2b10      	cmp	r3, #16
 8001f1e:	d802      	bhi.n	8001f26 <HAL_TIM_ConfigClockSource+0x62>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d06f      	beq.n	8002004 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001f24:	e078      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d06c      	beq.n	8002004 <HAL_TIM_ConfigClockSource+0x140>
 8001f2a:	2b30      	cmp	r3, #48	; 0x30
 8001f2c:	d06a      	beq.n	8002004 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f2e:	e073      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f30:	2b70      	cmp	r3, #112	; 0x70
 8001f32:	d00d      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0x8c>
 8001f34:	2b70      	cmp	r3, #112	; 0x70
 8001f36:	d804      	bhi.n	8001f42 <HAL_TIM_ConfigClockSource+0x7e>
 8001f38:	2b50      	cmp	r3, #80	; 0x50
 8001f3a:	d033      	beq.n	8001fa4 <HAL_TIM_ConfigClockSource+0xe0>
 8001f3c:	2b60      	cmp	r3, #96	; 0x60
 8001f3e:	d041      	beq.n	8001fc4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f40:	e06a      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f46:	d066      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0x152>
 8001f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f4c:	d017      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f4e:	e063      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f000 f96d 	bl	800223e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]
      break;
 8001f7c:	e04c      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f000 f956 	bl	800223e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fa0:	609a      	str	r2, [r3, #8]
      break;
 8001fa2:	e039      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f000 f8cd 	bl	8002150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2150      	movs	r1, #80	; 0x50
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 f924 	bl	800220a <TIM_ITRx_SetConfig>
      break;
 8001fc2:	e029      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f000 f8eb 	bl	80021ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2160      	movs	r1, #96	; 0x60
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 f914 	bl	800220a <TIM_ITRx_SetConfig>
      break;
 8001fe2:	e019      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f000 f8ad 	bl	8002150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2140      	movs	r1, #64	; 0x40
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f904 	bl	800220a <TIM_ITRx_SetConfig>
      break;
 8002002:	e009      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	4610      	mov	r0, r2
 8002010:	f000 f8fb 	bl	800220a <TIM_ITRx_SetConfig>
      break;
 8002014:	e000      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a29      	ldr	r2, [pc, #164]	; (8002144 <TIM_Base_SetConfig+0xb8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00b      	beq.n	80020bc <TIM_Base_SetConfig+0x30>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d007      	beq.n	80020bc <TIM_Base_SetConfig+0x30>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a26      	ldr	r2, [pc, #152]	; (8002148 <TIM_Base_SetConfig+0xbc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <TIM_Base_SetConfig+0x30>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a25      	ldr	r2, [pc, #148]	; (800214c <TIM_Base_SetConfig+0xc0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d108      	bne.n	80020ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <TIM_Base_SetConfig+0xb8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00b      	beq.n	80020ee <TIM_Base_SetConfig+0x62>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d007      	beq.n	80020ee <TIM_Base_SetConfig+0x62>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <TIM_Base_SetConfig+0xbc>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d003      	beq.n	80020ee <TIM_Base_SetConfig+0x62>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a18      	ldr	r2, [pc, #96]	; (800214c <TIM_Base_SetConfig+0xc0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d108      	bne.n	8002100 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a07      	ldr	r2, [pc, #28]	; (8002144 <TIM_Base_SetConfig+0xb8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d103      	bne.n	8002134 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	615a      	str	r2, [r3, #20]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	40012c00 	.word	0x40012c00
 8002148:	40000400 	.word	0x40000400
 800214c:	40000800 	.word	0x40000800

08002150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	f023 0201 	bic.w	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f023 030a 	bic.w	r3, r3, #10
 800218c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	621a      	str	r2, [r3, #32]
}
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f023 0210 	bic.w	r2, r3, #16
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	031b      	lsls	r3, r3, #12
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	621a      	str	r2, [r3, #32]
}
 8002200:	bf00      	nop
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	f043 0307 	orr.w	r3, r3, #7
 800222c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800223e:	b480      	push	{r7}
 8002240:	b087      	sub	sp, #28
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002258:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	021a      	lsls	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	431a      	orrs	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4313      	orrs	r3, r2
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	609a      	str	r2, [r3, #8]
}
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002290:	2302      	movs	r3, #2
 8002292:	e032      	b.n	80022fa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022cc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <__libc_init_array>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	2500      	movs	r5, #0
 800232c:	4e0c      	ldr	r6, [pc, #48]	; (8002360 <__libc_init_array+0x38>)
 800232e:	4c0d      	ldr	r4, [pc, #52]	; (8002364 <__libc_init_array+0x3c>)
 8002330:	1ba4      	subs	r4, r4, r6
 8002332:	10a4      	asrs	r4, r4, #2
 8002334:	42a5      	cmp	r5, r4
 8002336:	d109      	bne.n	800234c <__libc_init_array+0x24>
 8002338:	f000 f822 	bl	8002380 <_init>
 800233c:	2500      	movs	r5, #0
 800233e:	4e0a      	ldr	r6, [pc, #40]	; (8002368 <__libc_init_array+0x40>)
 8002340:	4c0a      	ldr	r4, [pc, #40]	; (800236c <__libc_init_array+0x44>)
 8002342:	1ba4      	subs	r4, r4, r6
 8002344:	10a4      	asrs	r4, r4, #2
 8002346:	42a5      	cmp	r5, r4
 8002348:	d105      	bne.n	8002356 <__libc_init_array+0x2e>
 800234a:	bd70      	pop	{r4, r5, r6, pc}
 800234c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002350:	4798      	blx	r3
 8002352:	3501      	adds	r5, #1
 8002354:	e7ee      	b.n	8002334 <__libc_init_array+0xc>
 8002356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800235a:	4798      	blx	r3
 800235c:	3501      	adds	r5, #1
 800235e:	e7f2      	b.n	8002346 <__libc_init_array+0x1e>
 8002360:	08002504 	.word	0x08002504
 8002364:	08002504 	.word	0x08002504
 8002368:	08002504 	.word	0x08002504
 800236c:	08002508 	.word	0x08002508

08002370 <memset>:
 8002370:	4603      	mov	r3, r0
 8002372:	4402      	add	r2, r0
 8002374:	4293      	cmp	r3, r2
 8002376:	d100      	bne.n	800237a <memset+0xa>
 8002378:	4770      	bx	lr
 800237a:	f803 1b01 	strb.w	r1, [r3], #1
 800237e:	e7f9      	b.n	8002374 <memset+0x4>

08002380 <_init>:
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	bf00      	nop
 8002384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002386:	bc08      	pop	{r3}
 8002388:	469e      	mov	lr, r3
 800238a:	4770      	bx	lr

0800238c <_fini>:
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238e:	bf00      	nop
 8002390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002392:	bc08      	pop	{r3}
 8002394:	469e      	mov	lr, r3
 8002396:	4770      	bx	lr
